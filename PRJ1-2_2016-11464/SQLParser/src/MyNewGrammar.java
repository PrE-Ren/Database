/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
// import
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.Cursor;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;

public class MyNewGrammar implements MyNewGrammarConstants {
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_INSERT = 4;
  public static final int PRINT_DELETE = 5;
  public static final int PRINT_SELECT = 6;
  public static final int PRINT_SHOW_TABLES = 7;

  //Environment & Database define
  static Environment myDbEnvironment = null;
  static Database myDatabase = null;
  static Cursor cursor = null;
  static String namestring = "";
  static String valuestring = "";
  static String errorstring = "";
	
  public static void main(String args[]) throws ParseException
  {
	/* OPENING DB */
	
	// Open Database Environment or if not, create one.
	EnvironmentConfig envConfig = new EnvironmentConfig();
	envConfig.setAllowCreate(true);
	myDbEnvironment = new Environment(new File("db/"), envConfig);
		
	// Open Database or if not, create one.
	DatabaseConfig dbConfig = new DatabaseConfig();
	dbConfig.setAllowCreate(true);
	dbConfig.setSortedDuplicates(true);
	myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);
    

    MyNewGrammar parser = new MyNewGrammar(System.in);
    System.out.print("DB_2016-11464> ");

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        MyNewGrammar.ReInit(System.in);
      }
    }
  }

  public static void operateDataBase(int q)
  {
	DatabaseEntry foundKey;
    DatabaseEntry foundData;
    boolean exist = false;
    String queryString = "";
    switch(q)
    {
      case PRINT_CREATE_TABLE:
      	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	    
    	  cursor = myDatabase.openCursor(null, null);
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    		  do {
    		      String keyString = new String(foundKey.getData(),"UTF-8");
    		      if(keyString.compareTo(namestring) == 0) //find if same name table exists
    		      {
    		    	  errorstring = "Create table has failed: table with the same name already exists";
    		    	  break;
    		      }
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		    
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	    
    	  if(errorstring.compareTo("") == 0)
    	  {
    	      String columns[] = valuestring.split("@#");
    	      int rnum[] = new int[columns.length];
    	      int prinum = 0;
    	      boolean sum = false;
    	      for(int i=0;i<columns.length;i++)
    	      {
    	      	  String str[] = columns[i].split("@");
    	    	  exist = false;
    	    	  switch(str[0])
    	    	  {
    	    	  case "primary key":
    	    		  prinum++;
    	    		  if(prinum == 2) 
    	        	  {
    	        	  	  errorstring = "Create table has failed: primary key definition is duplicated"; //minimal two definition detected
    	        		  break;
    	        	  }
    	    		  //parse primary key line
    	    	      int num = str.length-1;
    	    	      String names[] = new String[num];
    	    	      for(int j=1;j<=num;j++)
    	    	      {
    	    	          names[j-1] = str[j];
    	    	      }
    	    	      for(int j=0;j<num;j++)
    	    	      {
    	    	    	  int k=0;
    	    	          for(k=0;k<columns.length;k++)
    	    	          {
    	    	        	  if(k == i) continue;
    	    	        	  String tmp5[] = columns[k].split("@");
    	    	        	  if(tmp5[0].compareTo(names[j]) == 0)  //find columns from table
    	    	        	  {
    	    	        	  	  if(tmp5.length == 2) columns[k] = columns[k] + "@not null"; //if a column not contains not null constraint, add
    	    	        		  sum = true;
    	    	        		  break;
    	    	        	  }
    	    	        			
    	    	          }
    	    	          if(k==columns.length)  //not exist in column definition
    	    	          {
    	    	        	  errorstring = "Create table has failed: '" + names[j] + "' does not exists in column definition";
    	    	        	  break;
    	    	          }
    	    	      }
    	    		  break;
    	    	  case "foreign key":
    	    		  int num1, num2;
    	    		  int j;
    	    		  //parse foreign key line
    	    		  for(j=1;j<str.length;j++)
    	    		  {
    	    			  if(str[j].compareTo("references") == 0) break;
    	    		  }
    	    		  num1 = j-1;
    	    		  num2 = str.length - num1 - 3;
    	    		  if(num1 != num2) //different numbers between column and referencing column
    	    		  {
    	    		      errorstring = "Create table has failed: foreign key references wrong type";
    	    			  break;
    	    		  }
    	    		  else
    	    		  {
    	    		   	  //parse data into arrays
    	    			  String cur_names[] = new String[num1];
    	    			  String ref_tabname = str[j+1].substring(1, str[j+1].length());
    	    			  String ref_names[] = new String[num1];
    	    			  //String tab_data[] = new String[num];
    	    			  String types[] = new String[num1];
    	    			  for(int k=0;k<num1;k++)
    	    			  {
    	    			      cur_names[k] = str[1+k];
    	    			      ref_names[k] = str[num1+3+k];
    	    			  }
    	    			    
    	    			  DatabaseEntry foundKey2 = new DatabaseEntry();
    	    			  DatabaseEntry foundData2 = new DatabaseEntry();
    	    			  cursor = myDatabase.openCursor(null, null);
    	    			  try
    	    			  {
    	    			      cursor.getFirst(foundKey2,foundData2,LockMode.DEFAULT);  	
    	    				  do {
    	    				      String keyString = new String(foundKey2.getData(),"UTF-8");
    	    				      queryString = new String(foundData2.getData(),"UTF-8");
    	    				      if(keyString.compareTo(ref_tabname) == 0) //find the same name table(referencing table)
    	    				      {
    	    				      	  exist = true;
    	    				    	  break;
    	    				      }
    	    				  } while (cursor.getNext(foundKey2, foundData2, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    	    			  } catch(Exception e){
    	    			    	
    	    			  }
    	    			  cursor.close();
    	    			  if(!exist) errorstring = "Create table has failed: foreign key references non existing table"; //referencing table not exists
    	    			  else 
    	    			  {
    	    			      String tmp2[] = queryString.split("@#");
    	    			      for(int k=0;k<num1;k++)
    	    			      {
    	    			    	  int l;
    	    				      for(l=0;l<tmp2.length;l++)
    	    				      {
    	    				    	  String tmp3[] = tmp2[l].split("@");
    	    				    	  if(tmp3[0].compareTo(ref_names[k]) == 0) //find columns that has same name in referencing table 
    	    				    	  {
    	    				    		  //tab_data[j] = tmp2[i];
    	    				    		  types[k] = tmp3[1];
    	    				    		  break;
    	    				    	  }
    	    				      }
    	    				      if (l==tmp2.length) //no matching column found
    	    				      {
    	    				    	  errorstring = "Create table has failed: foreign key references non existing column";
    	    				    	  exist = false;
    	    				    	  break;
    	    				      }
    	    			      }
    	    			    	
    	    			      if(exist)
    	    			      {
    	    				      for(int k=0;k<tmp2.length;k++)
    	    				      {
    	    				    	  String tmp3[] = tmp2[k].split("@");
    	    				    	  if(tmp3[0].compareTo("primary key") == 0) 
    	    				    	  {
    	    				    		  if((tmp3.length-1) != num1) //number is not same with primary key set
    	    				    		  {
    	    				    			  errorstring = "Create table has failed: foreign key references non primary key column";
    	    				    		  }
    	    				    		  else
    	    				    		  {
    		    				    		  for(int l=0;l<num1;l++)
    		    				    	      {
    		    				    			  if(!tmp2[k].contains(ref_names[l])) //primary key not contains referencing column 
    		    				    			  {
    		    				    				  errorstring = "Create table has failed: foreign key references non primary key column";
    		    				    		    	  break;
    		    				    			  }
    		    				    	      }
    	    				    		  }
    	    				    	  }
    	    				      }
    	    				      for(int k=0;k<num1;k++)
    	    				      {
    	    				    	  int l=0;
    	    					      for(l=0;l<columns.length;l++) //find columns that has same name
    	    					      {
    	    					    	  String tmp4[] = columns[l].split("@");
    	    					    	  if(tmp4[0].compareTo(cur_names[k]) == 0) 
    	    					    	  {
    	    					    		  //tab_data[j] = tmp2[i];    					    			
    	    					    		  if(rnum[l] == 1) 
    	    					    		  {
    	    					    			  errorstring = "Create table has failed: foreign key definition is duplicated";
    	    					    			  break;
    	    					    		  }
    	    					    		  else rnum[l]++;
    	    					    				
    	    					    		  if(types[k].compareTo(tmp4[1]) != 0) //compare types with referencing column
    	    					    			  errorstring = "Create table has failed: foreign key references wrong type";
    	    					    		  break;
    	    					    	  }
    	    					      }
    	    					    	
    	    					      if(l==columns.length)  //not exist in column definition
    	    		    	          {
    	    		    	              errorstring = "Create table has failed: '" + cur_names[k] + "' does not exists in column definition";
    	    		    	        	  break;
    	    		    	          }
    	    				      }
    	    			      }
    	    			  }
    	    		  }
    	    		  break;
    	    	  default:
    	    		  //no need to parse 
    	    		  break;
    	    	  }
    	    	  if(errorstring.compareTo("") != 0) break;    	
    	      }
    	      if(sum) //some string need to be re-parsed(add not null constraint)
    	      {
    	    	  String newstring = "";
    	    	  for(int i=0;i<columns.length;i++)
    	    	  {
    	    		  newstring = newstring + columns[i] + "@#";
    	    	  }
    	    	  valuestring = new String(newstring);
    	      }
    	  }
    	  DatabaseEntry key;
    	  DatabaseEntry data;
    	  if(errorstring.compareTo("") == 0) { //no error -> create table into database
    	      try {
    		      cursor = myDatabase.openCursor(null, null);
    		      key = new DatabaseEntry(namestring.getBytes("UTF-8"));
    		      data = new DatabaseEntry(valuestring.getBytes("UTF-8"));
    		      cursor.put(key, data);
    		      cursor.close();
    		  } catch (DatabaseException de) {
    		    	
    		  } catch (UnsupportedEncodingException e) {
    		      e.printStackTrace();
    		  }
    		      System.out.println("'" + namestring + "' table is created");   
    	  }
    	  else
    		 System.out.println(errorstring); //error
    	  break;
      case PRINT_DROP_TABLE:
    	  cursor = myDatabase.openCursor(null, null);
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    		  do {
    		      queryString = new String(foundData.getData(),"UTF-8");
    		      String f_string = "/" + valuestring + "@"; //table name identifier + table name + delimiter
    		      if(queryString.contains(f_string)) errorstring = "Drop table has failed: '" + valuestring + "' is referenced by other table"; //it is referenced by other table
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    	  } catch(Exception e){
    	    	
    	  }
    	    
    	  cursor.close();
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  if(errorstring.compareTo("") == 0) //no referential error
    	  {
    	      cursor = myDatabase.openCursor(null, null);
    		  try
    		  {
    		      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    			  do {
    			      String keyString = new String(foundKey.getData(),"UTF-8");
    			      if(keyString.compareTo(valuestring) == 0) //find table from database
    			      {
    			    		exist = true;
    			    		break;
    			      }
    			  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		  } catch(Exception e){
    		    	
    		  }
    		  if(exist) //exist
    		  {
    		      cursor.delete();
    		      System.out.println("'" + valuestring + "' table is dropped");
    		  }
    		  else System.out.println("No such table"); //no such table error
    		  cursor.close();
    	  }
    	  else
    	      System.out.println(errorstring); //referential error
    	  break;
      case PRINT_DESC:
    	  cursor = myDatabase.openCursor(null, null);
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);
    		  do {
    		      String keyString = new String(foundKey.getData(),"UTF-8");
    		      queryString = new String(foundData.getData(),"UTF-8");
    		      if(keyString.compareTo(valuestring) == 0) //find table from database
    		      {
    		    		exist = true; 
    		    		break;
    		      }
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	    
    	    if(exist)
    	    {
    	    	//parse data
    		    String spl[] = queryString.split("@#");
    		    String column_name[] = new String[spl.length];
    		    String type[] = new String[spl.length];
    		    boolean nullity[] = new boolean[spl.length]; 
    		    int keys[] = new int[spl.length];
    		    
    		    for(int i=0;i<spl.length;i++)
    		    {
    		    	String spl2[] = spl[i].split("@");
    		    	column_name[i] = spl2[0];
    		    	keys[i] = 0;
    		    }
    		  
    		    
    		    for(int i=0;i<spl.length;i++)
    		    {
    		    	String spl2[] = spl[i].split("@");
    		    	switch(spl2[0])
    		    	{
    		    	case "primary key":
    		    		for(int j=1; j<spl2.length;j++)
    		    		{
    		    			int k;
    		    			for(k=0;k<spl.length;k++)
    		    			{
    		    				if(spl2[j].compareTo(column_name[k]) == 0)
    		    					break; //exit
    		    			}
    		    			keys[k] += 1;
    		    		}
    		    		break;
    		    	case "foreign key":
    		    		for(int j=1; j<spl2.length;j++)
    		    		{
    		    			if(spl2[j].compareTo("references") == 0) break;
    		    			int k;
    		    			for(k=0;k<spl.length;k++)
    		    			{
    		    				if(spl2[j].compareTo(column_name[k]) == 0)
    		    					break; //exit
    		    			}
    		    			keys[k] += 2;
    		    		}
    		    		break;
    		    	default:
    		    		column_name[i] = spl2[0];
    		    		type[i] = spl2[1];
    		    		if (spl[i].contains("not null")) nullity[i] = false; else nullity[i] = true;
    		    		break;
    		    	}
    		    }
    		    //print parsed data
    		    System.out.println("----------------");
    		    System.out.println("table_name [" + valuestring + "]");
    		    System.out.println("column_name type null key"); 
    		    for(int i=0;i<spl.length;i++)
    		    {
    		    	switch(column_name[i])
    		    	{
    		    	case "primary key":
    		    	case "foreign key":
    		    		break;
    		    	default:
    			    	System.out.print(column_name[i] + " ");
    			    	System.out.print(type[i] + " ");
    			    	if(nullity[i] == false) System.out.print("N "); else System.out.print("Y ");
    			    	if(keys[i] == 3) System.out.print("PRI/FOR"); 
    			    	else if (keys[i] == 2) System.out.print("FOR"); 
    			    	else if (keys[i] == 1) System.out.print("PRI");
    			    	System.out.println("");
    			    	break;
    		    	}
    		    }
    		    System.out.println("----------------");
    	    }
    	    else
    	    	System.out.println("No such table"); //no such table error
    	  break;
      case PRINT_SHOW_TABLES:
    	  cursor = myDatabase.openCursor(null, null);
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);
    	      if(foundKey.getData() != null)
    	    	  System.out.println("----------------");
    	      else
    	    	  System.out.println("There is no table"); //no table error
    		  do {
    		      String keyString = new String(foundKey.getData(),"UTF-8");
    		      System.out.println(keyString); //print all tables
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		  System.out.println("----------------");
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	  break;
      }
  }
  
  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE: 	  
        //System.out.println("\u005c'CREATE TABLE\u005c' requested");
        break;
      case PRINT_DROP_TABLE:
        //System.out.println("\u005c'DROP TABLE\u005c' requested");
        break;
      case PRINT_DESC:
        //System.out.println("\u005c'DESC\u005c' requested");
        break;
      case PRINT_INSERT:
        //System.out.println("\u005c'INSERT\u005c' requested");
        break;
      case PRINT_DELETE:
        //System.out.println("\u005c'DELETE\u005c' requested");
        break;
      case PRINT_SELECT:
        //System.out.println("\u005c'SELECT\u005c' requested");
        break;
      case PRINT_SHOW_TABLES:
        //System.out.println("\u005c'SHOW TABLES\u005c' requested");
        break;
    }
    System.out.print("DB_2016-11464> ");
  }

//1.QUERY
//total command
  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
    case DROP_TABLE:
    case DESC:
    case SHOW_TABLES:
    case SELECT:
    case INSERT_INTO:
    case DELETE_FROM:
      queryList();
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
      /* CLOSING DB */
      if (myDatabase != null) myDatabase.close();
      if (myDbEnvironment != null) myDbEnvironment.close();
      System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//list of queries
  static final public void queryList() throws ParseException {
  int q;
    label_1:
    while (true) {
      q = query();
      jj_consume_token(SEMICOLON);  
      operateDataBase(q);
      printMessage(q);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_TABLE:
      case DROP_TABLE:
      case DESC:
      case SHOW_TABLES:	  
      case SELECT:
      case INSERT_INTO:
      case DELETE_FROM:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

//one query
  static final public int query() throws ParseException {
  int q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
      createTableQuery();
      q = PRINT_CREATE_TABLE;
      break;
    case DROP_TABLE:
      dropTableQuery();
      q = PRINT_DROP_TABLE;
      break;
    case DESC:
      descQuery();
      q = PRINT_DESC;
      break;
    case SELECT:
      selectQuery();
      q = PRINT_SELECT;
      break;
    case INSERT_INTO:
      insertQuery();
      q = PRINT_INSERT;
      break;
    case DELETE_FROM:
      deleteQuery();
      q = PRINT_DELETE;
      break;
    case SHOW_TABLES:
      showTablesQuery();
      q = PRINT_SHOW_TABLES;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

//2.CREATE_TABLE
  static final public void createTableQuery() throws ParseException {
    jj_consume_token(CREATE_TABLE);
    //initialize strings
    namestring = ""; //will contain information of table name
    valuestring = ""; //will contain information of columns
    errorstring = ""; //will contain information of errors
    tableName();
    namestring = new String(valuestring);
    valuestring = "";
    tableElementList();
    //System.out.println("tablename : "+namestring);
    //System.out.println("values : "+valuestring);
    
    
  }

  static final public void tableElementList() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    tableElement();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      tableElement();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void tableElement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      columnDefinition();
      break;
    case PRIMARY_KEY:
    case FOREIGN_KEY:
      tableConstraintDefinition();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    valuestring = valuestring+"#"; //add column delimiter
  }

  static final public void columnDefinition() throws ParseException {
    columnName();
    String tmp[] = valuestring.split("@#");
    for(int i=0;i<tmp.length-1;i++)
    {
    	String tmp2[] = tmp[i].split("@");
    	if(tmp2[0].compareTo(tmp[tmp.length-1].substring(0, tmp[tmp.length-1].length()-1)) == 0) //check every column when adding if it is duplicated
    	{
    		errorstring = "Create table has failed: column definition is duplicated";
    		break;
    	}
    }
    dataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_NULL:
    	valuestring = valuestring + jj_consume_token(NOT_NULL);
    	valuestring = valuestring + "@";
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void tableConstraintDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY_KEY:
      primaryKeyConstraint();
      break;
    case FOREIGN_KEY:
      referentialConstraint();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primaryKeyConstraint() throws ParseException {
	valuestring = valuestring + jj_consume_token(PRIMARY_KEY);
	valuestring = valuestring + "@"; //delimiter between every word
    columnNameList();
  }

  static final public void referentialConstraint() throws ParseException {
	valuestring = valuestring + jj_consume_token(FOREIGN_KEY);
	valuestring = valuestring + "@";
    columnNameList();
    valuestring = valuestring + jj_consume_token(REFERENCES);
    valuestring = valuestring + "@/"; //table name identifier '/'
    tableName();
    valuestring = valuestring + "@";
    columnNameList();  
  }

  static final public void columnNameList() throws ParseException {
	jj_consume_token(LEFT_PAREN);
    columnName();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void dataType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      valuestring = valuestring + jj_consume_token(INT);
      break;
    case CHAR:
      valuestring = valuestring + jj_consume_token(CHAR);
      valuestring = valuestring + jj_consume_token(LEFT_PAREN);
      String int_val = "" + jj_consume_token(INT_VALUE);
      if(int_val.compareTo("0") == 0) errorstring = "Char length should be over 0"; //if char(0) then error
      valuestring = valuestring + int_val;
      valuestring = valuestring + jj_consume_token(RIGHT_PAREN);
      break;
    case DATE:
      valuestring = valuestring + jj_consume_token(DATE);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    valuestring = valuestring + "@";
  }

  static final public void tableName() throws ParseException {
	 String tmp = "" + jj_consume_token(LEGAL_IDENTIFIER);
	 valuestring = valuestring + tmp.toLowerCase();
  }

  static final public void columnName() throws ParseException {
	 String tmp = "" + jj_consume_token(LEGAL_IDENTIFIER);
     valuestring = valuestring + tmp.toLowerCase();
     valuestring = valuestring + "@";
  }

//3.DROP TABLE, DESC, SHOW TABLES
  static final public void dropTableQuery() throws ParseException {
    jj_consume_token(DROP_TABLE);
    valuestring = "";
    errorstring = "";
    tableName();
  }

  static final public void descQuery() throws ParseException {
    jj_consume_token(DESC);
    valuestring = "";
    tableName();
  }

  static final public void showTablesQuery() throws ParseException{
    jj_consume_token(SHOW_TABLES);
  }

//4.SELECT
  static final public void selectQuery() throws ParseException {
    jj_consume_token(SELECT);
    selectList();
    tableExpression();
  }

  static final public void selectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      break;
    case LEGAL_IDENTIFIER:
      selectedColumn();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        selectedColumn();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selectedColumn() throws ParseException {
    if (jj_2_1(2)) {
      tableName();
      jj_consume_token(PERIOD);
      columnName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        columnName();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      columnName();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void tableExpression() throws ParseException {
    fromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void fromClause() throws ParseException {
    jj_consume_token(FROM);
    tableReferenceList();
  }

  static final public void tableReferenceList() throws ParseException {
    referedTable();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      referedTable();
    }
  }

  static final public void referedTable() throws ParseException {
    tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      tableName();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void whereClause() throws ParseException {
    jj_consume_token(WHERE);
    booleanValueExpression();
  }

  static final public void booleanValueExpression() throws ParseException {
    booleanTerm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      booleanTerm();
    }
  }

  static final public void booleanTerm() throws ParseException {
    booleanFactor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      booleanFactor();
    }
  }

  static final public void booleanFactor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    booleanTest();
  }

  static final public void booleanTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case LEGAL_IDENTIFIER:
    case CHAR_STRING:
    case DATE_VALUE:
      predicate();
      break;
    case LEFT_PAREN:
      parenthesizedBooleanExpression();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parenthesizedBooleanExpression() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void predicate() throws ParseException {
    if (jj_2_2(4)) {
      comparisonPredicate();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        nullPredicate();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void comparisonPredicate() throws ParseException {
    compOperand();
    jj_consume_token(COMP_OP);
    compOperand();
  }

  static final public void compOperand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case CHAR_STRING:
    case DATE_VALUE:
      comparableValue();
      break;
    case LEGAL_IDENTIFIER:
      if (jj_2_3(2)) {
        tableName();
        jj_consume_token(PERIOD);
        columnName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEGAL_IDENTIFIER:
          columnName();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparableValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
      jj_consume_token(INT_VALUE);
      break;
    case CHAR_STRING:
      jj_consume_token(CHAR_STRING);
      break;
    case DATE_VALUE:
      jj_consume_token(DATE_VALUE);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void nullPredicate() throws ParseException {
    if (jj_2_4(2)) {
      tableName();
      jj_consume_token(PERIOD);
      columnName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        columnName();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    nullOperation();
  }

  static final public void nullOperation() throws ParseException {
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
  }

//5.INSERT, DELETE
  static final public void insertQuery() throws ParseException {
    jj_consume_token(INSERT_INTO);
    tableName();
    insertColumnsAndSource();
  }

  static final public void insertColumnsAndSource() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      columnNameList();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    valueList();
  }

  static final public void valueList() throws ParseException {
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    value();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      value();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      break;
    case INT_VALUE:
    case CHAR_STRING:
    case DATE_VALUE:
      comparableValue();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void deleteQuery() throws ParseException {
    jj_consume_token(DELETE_FROM);
    tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(38)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(38)) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(38)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2803c220,0x2803c200,0x2803c200,0x0,0x1800,0x400,0x1800,0x0,0x1c0,0x0,0x40000,0x0,0x80000,0x200000,0x0,0x80000,0x400000,0x800000,0x2000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x80000000,0x0,0x4000000,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x2,0x40,0x0,0x0,0x2,0x0,0x2,0x40,0x40,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0xc48,0x40,0x40,0xc48,0xc08,0x40,0x0,0x0,0x2,0xc08,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
