/* Generated By:JavaCC: Do not edit this line. MyNewGrammarTokenManager.java */
// import
import java.io.File;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

/** Token Manager. */
public class MyNewGrammarTokenManager implements MyNewGrammarConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 33);
      case 41:
         return jjStopAtPos(0, 34);
      case 44:
         return jjStopAtPos(0, 35);
      case 46:
         return jjStopAtPos(0, 40);
      case 59:
         return jjStopAtPos(0, 32);
      case 95:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 33)
                     jjCheckNAdd(1);
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 2:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xfffbf7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 8:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(0, 3);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(25);
                  break;
               case 6:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe7fdffe0L) != 0L)
         {
            jjmatchedKind = 44;
            return 25;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 26;
         return -1;
      case 1:
         if ((active0 & 0x20240000L) != 0L)
            return 25;
         if ((active0 & 0xc7d9ffe0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 25;
         }
         return -1;
      case 2:
         if ((active0 & 0x8719ffa0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return 25;
         }
         if ((active0 & 0x40c00040L) != 0L)
            return 25;
         return -1;
      case 3:
         if ((active0 & 0x711be00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 25;
         }
         if ((active0 & 0x800841a0L) != 0L)
            return 25;
         return -1;
      case 4:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
            return 25;
         if ((active0 & 0x7011e00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 25;
         }
         return -1;
      case 5:
         if ((active0 & 0x5001e00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 25;
         }
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2010000L) != 0L)
            return 25;
         return -1;
      case 6:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1c00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 25;
         }
         return -1;
      case 7:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 25;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 25;
         }
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
            return 25;
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 39:
         return jjStartNfaWithStates_0(0, 28, 26);
      case 40:
         return jjStopAtPos(0, 33);
      case 41:
         return jjStopAtPos(0, 34);
      case 42:
         return jjStopAtPos(0, 17);
      case 44:
         return jjStopAtPos(0, 35);
      case 46:
         return jjStopAtPos(0, 40);
      case 59:
         return jjStopAtPos(0, 32);
      case 95:
         return jjStopAtPos(0, 36);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x440000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x280L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4006100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x21000040L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc0800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x18000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4015000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x108080L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40800800L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 25);
         return jjMoveStringLiteralDfa2_0(active0, 0x82600L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 25);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 25);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 68:
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 25);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x420L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x86010000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8a000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004000L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 25);
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 25);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x5011800L);
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 25);
         break;
      case 77:
      case 109:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 25);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 25);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1001000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4001200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 83:
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 25);
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0x100a000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xa000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0xc00L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0xa000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 30);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0xc00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0xa000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         return jjMoveStringLiteralDfa10_0(active0, 0x8c00L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 12, 25);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 77:
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 26);
         break;
      case 79:
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(10, 10);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
                  if ((0xfffbf7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 39)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 33)
                     jjCheckNAdd(1);
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 2:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xfffbf7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 8:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(0, 3);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
               case 6:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffdffe0L) != 0L)
         {
            jjmatchedKind = 44;
            return 25;
         }
         return -1;
      case 1:
         if ((active0 & 0x240000L) != 0L)
            return 25;
         if ((active0 & 0xfd9ffe0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 25;
         }
         return -1;
      case 2:
         if ((active0 & 0xf19ffa0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 25;
         }
         if ((active0 & 0xc00040L) != 0L)
            return 25;
         return -1;
      case 3:
         if ((active0 & 0x711be00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 25;
         }
         if ((active0 & 0x80841a0L) != 0L)
            return 25;
         return -1;
      case 4:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
            return 25;
         if ((active0 & 0x7011e00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 25;
         }
         return -1;
      case 5:
         if ((active0 & 0x5001e00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 25;
         }
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2010000L) != 0L)
            return 25;
         return -1;
      case 6:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1c00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 25;
         }
         return -1;
      case 7:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 25;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 25;
         }
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
            return 25;
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 33);
      case 41:
         return jjStopAtPos(0, 34);
      case 42:
         return jjStopAtPos(0, 17);
      case 44:
         return jjStopAtPos(0, 35);
      case 46:
         return jjStopAtPos(0, 40);
      case 59:
         return jjStopAtPos(0, 32);
      case 95:
         return jjStopAtPos(0, 36);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_2(0x440000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_2(0x280L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_2(0x4006100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_2(0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_2(0x80800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_2(0x1000040L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_2(0x8800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_2(0x200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_2(0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_2(0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_2(0x18000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_2(0x2000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_2(0x100000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x4015000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x108080L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x1400040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x800800L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(1, 21, 25);
         return jjMoveStringLiteralDfa2_2(active0, 0x82600L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(1, 18, 25);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x8000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
static private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x80L);
      case 68:
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(2, 22, 25);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x100200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x420L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0xe010000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x8a000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_2(active0, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x1004000L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(2, 6, 25);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(2, 23, 25);
         return jjMoveStringLiteralDfa3_2(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
static private int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(3, 14, 25);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(3, 8, 25);
         return jjMoveStringLiteralDfa4_2(active0, 0x5011800L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(3, 27, 25);
         break;
      case 77:
      case 109:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(3, 19, 25);
         return jjMoveStringLiteralDfa4_2(active0, 0x400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(3, 7, 25);
         return jjMoveStringLiteralDfa4_2(active0, 0x100000L);
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(3, 5, 25);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
static private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_2(active0, 0xa000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0x10000L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(4, 20, 25);
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x1001000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000200L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
static private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_2(active0, 0x4001200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_2(active0, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0x400L);
      case 83:
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(5, 25, 25);
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 25);
         return jjMoveStringLiteralDfa6_2(active0, 0x100a000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
static private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_2(active0, 0x5000200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_2(active0, 0xa000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_2(active0, 0x1800L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_2(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
static private int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_2(active0, 0xc00L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_2(active0, 0xa000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_2(active0, 0x1000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_2(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_2(active0, 0x1000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_2(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0);
}
static private int jjMoveStringLiteralDfa8_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_2(active0, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_2(active0, 0x1000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_2(active0, 0xc00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_2(active0, 0xa000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_2(active0, 0x1000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_2(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0);
}
static private int jjMoveStringLiteralDfa9_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_2(active0, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         return jjMoveStringLiteralDfa10_2(active0, 0x8c00L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_2(active0, 0x4000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(9, 12, 25);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_2(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0);
}
static private int jjMoveStringLiteralDfa10_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_2(active0, 0x200L);
      case 77:
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 26);
         break;
      case 79:
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(10, 10);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_2(9, active0);
}
static private int jjMoveStringLiteralDfa11_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, active0);
}
static private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 33)
                     jjCheckNAdd(1);
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 2:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xfffbf7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 8:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(0, 3);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(25);
                  break;
               case 6:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            return -1;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 28;
         if ((active0 & 0xc7fdffe0L) != 0L)
         {
            jjmatchedKind = 44;
            return 27;
         }
         return -1;
      case 1:
         if ((active0 & 0x240000L) != 0L)
            return 27;
         if ((active0 & 0xc7d9ffe0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 27;
         }
         return -1;
      case 2:
         if ((active0 & 0x8719ffa0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return 27;
         }
         if ((active0 & 0x40c00040L) != 0L)
            return 27;
         return -1;
      case 3:
         if ((active0 & 0x711be00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 27;
         }
         if ((active0 & 0x800841a0L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
            return 27;
         if ((active0 & 0x7011e00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 27;
         }
         return -1;
      case 5:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x5001e00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active0 & 0x2010000L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1c00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 27;
         }
         return -1;
      case 7:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 27;
         }
         return -1;
      case 8:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 27;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
            return 27;
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x5000200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 32:
         return jjStopAtPos(0, 48);
      case 39:
         return jjStartNfaWithStates_1(0, 51, 28);
      case 40:
         return jjStopAtPos(0, 33);
      case 41:
         return jjStopAtPos(0, 34);
      case 42:
         return jjStopAtPos(0, 17);
      case 44:
         return jjStopAtPos(0, 35);
      case 46:
         return jjStopAtPos(0, 40);
      case 59:
         return jjStopAtPos(0, 32);
      case 95:
         return jjStopAtPos(0, 36);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x440000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x280L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x4006100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x80800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x1000040L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0xc0800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x18000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x100000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x4015000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x108080L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x1400040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x40800800L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(1, 21, 27);
         return jjMoveStringLiteralDfa2_1(active0, 0x82600L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(1, 18, 27);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x80L);
      case 68:
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(2, 22, 27);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x100200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x420L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x86010000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x8a000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x1004000L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(2, 6, 27);
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x40000100L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(3, 14, 27);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(3, 8, 27);
         return jjMoveStringLiteralDfa4_1(active0, 0x5011800L);
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 27);
         break;
      case 77:
      case 109:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(3, 19, 27);
         return jjMoveStringLiteralDfa4_1(active0, 0x400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(3, 7, 27);
         return jjMoveStringLiteralDfa4_1(active0, 0x100000L);
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(3, 5, 27);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
static private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_1(active0, 0xa000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 27);
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x1001000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000200L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
static private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_1(active0, 0x4001200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x400L);
      case 83:
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(5, 25, 27);
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(5, 16, 27);
         return jjMoveStringLiteralDfa6_1(active0, 0x100a000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
static private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_1(active0, 0x5000200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0xa000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_1(active0, 0x1800L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_1(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
static private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_1(active0, 0xc00L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_1(active0, 0xa000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x1000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x1000000L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 30);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_1(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
static private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_1(active0, 0x1000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_1(active0, 0xc00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0xa000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x1000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
static private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_1(active0, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         return jjMoveStringLiteralDfa10_1(active0, 0x8c00L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0x4000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(9, 12, 27);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_1(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
static private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_1(active0, 0x200L);
      case 77:
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 26);
         break;
      case 79:
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(10, 10);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
static private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((0xfffbf7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 39)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 0:
                  if ((0xfffbf7b00000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  if ((0xc00bf7a00000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(6, 9);
                  }
                  else if (curChar == 60)
                     jjCheckNAdd(1);
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 2:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xfffbf7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 8:
                  if ((0xfffbf7b00000000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 9:
                  if ((0xc00bf7a00000000L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 10:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(6, 9);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
               case 6:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 0:
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(27);
                  }
                  else if ((0x78000001f8000001L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  break;
               case 8:
                  if ((0x7fffffffffffffffL & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 9:
                  if ((0x78000001f8000001L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   9, 11, 20, 23, 6, 7, 11, 13, 22, 25, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\52", null, null, null, null, null, null, null, null, null, 
null, "\47", null, null, null, "\73", "\50", "\51", "\54", "\137", null, null, null, 
"\56", null, null, null, null, null, null, null, null, null, "\40", "\47", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "STATE1",
   "STATE2",
   "STATE3",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 0, 
};
static final long[] jjtoToken = {
   0xfffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[28];
static private final int[] jjstateSet = new int[56];
static protected char curChar;
/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
