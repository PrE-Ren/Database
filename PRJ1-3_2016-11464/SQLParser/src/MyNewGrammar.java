/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
// import
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.Cursor;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;
import com.sleepycat.je.Put;

public class MyNewGrammar implements MyNewGrammarConstants {
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_INSERT = 4;
  public static final int PRINT_DELETE = 5;
  public static final int PRINT_SELECT = 6;
  public static final int PRINT_SHOW_TABLES = 7;

  //Environment & Database define
  static Environment myDbEnvironment = null;
  static Database myDatabase = null;
  static Cursor cursor = null;
  static String namestring = "";
  static String valuestring = "";
  static String errorstring = "";
	
  public static void main(String args[]) throws ParseException
  {
	/* OPENING DB */
	
	// Open Database Environment or if not, create one.
	EnvironmentConfig envConfig = new EnvironmentConfig();
	envConfig.setAllowCreate(true);
	myDbEnvironment = new Environment(new File("db/"), envConfig);
		
	// Open Database or if not, create one.
	DatabaseConfig dbConfig = new DatabaseConfig();
	dbConfig.setAllowCreate(true);
	dbConfig.setSortedDuplicates(true);
	myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);
    

    MyNewGrammar parser = new MyNewGrammar(System.in);
    System.out.print("DB_2016-11464> ");

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        MyNewGrammar.ReInit(System.in);
      }
    }
  }
  
  public static String[] reduce(String[] input)
  {
	  String[] output = new String[input.length];
	  for(int i=0;i<input.length;i++)
	  {
		  String[] tmp = input[i].split("\\.");
		  output[i] = tmp[1];
	  }
	  return output;
  }
  
  public static String makeDataWithout(String[][] input, int[] without) //make data without some data by input
  {
	  String output = "";
	  for(int i=0; i<input.length;i++)
	  {
		  if(without[i] != 1)
		  {
			  for(int j=0; j<input[i].length;j++)
			  {
				  output = output + input[i][j];
				  output = output + "\"";
			  }
			  output = output + "#";
		  }
	  }
	  return output;
  }
  
  public static String makeData(String[][] input) //make data string by input
  {
	  String output = "";
	  for(int i=0; i<input.length;i++)
	  {
		  for(int j=0; j<input[i].length;j++)
		  {
			  output = output + input[i][j];
			  output = output + "\"";
		  }
		  output = output + "#";
	  }
	  return output;
  }
  
  public static String[][] concatRec(String[][] first, String[][] second) //join records
  {
	  String[][] result = new String[first.length*second.length][];
	  for(int i=0;i<first.length;i++)
	  {
		  for(int j=0;j<second.length;j++)
		  {
			  result[second.length*i+j] = concat(first[i],second[j]);
		  }
	  }
	  return result;
  }
  
  public static String[] concat(String[] first, String[] second) //string array concat
  {
	  String[] result = Arrays.copyOf(first, first.length + second.length);
	  System.arraycopy(second, 0, result, first.length, second.length);
	  return result;
  }
  
  public static int orTest(int a, int b) //three-value or
  {
	  int c;
	  
	  if((a == 1) || (b == 1)) 
		  c = 1;
	  else if((a == 2) || (b == 2))
		  c = 2;
	  else
		  c = 0;
	  
	  return c;
  }
  
  public static int andTest(int a, int b) //three-value and
  {  
	  int c;
	  
	  if((a == 1) && (b == 1)) 
		  c = 1;
	  else if((a == 0) || (b == 0))
		  c = 0;
	  else
		  c = 2;
	  
	  return c;
  }
  
  public static boolean allTrue(int[] input) //if all values in array is true
  {
	  for(int i=0;i<input.length;i++)
	  {
		  if(input[i] != 1) return false;
	  }
	  return true;
  }
  
  public static int[] negate(int[] input) //three-value array negate
  {
	  int[] output = new int[input.length];
	  for(int i=0;i<input.length;i++)
	  if(input[i] == 2)
		  output[i] = input[i];
	  else
		  output[i] = 1-input[i];
	  return output;
  }
  
  public static int[] falsearr(int len) //false array
  {
	  int[] output = new int[len];
	  for(int i=0;i<len;i++)
		  output[i] = 0;
	  return output;
  }
  
  public static boolean columnSearch(String a, String b) //if the column exists
  {
	  if(b.compareTo(a) == 0) return true;
	  else {
		String[] tmp = a.split("\\.");
		if(b.compareTo(tmp[1]) == 0) return true;
	  }
	  return false;
  }
  
  public static boolean tableExists(String[] a, String b) //if the table exists
  {
	  String tmp[] = b.split("\\.");
	  boolean result = false;
	  for(int i=0;i<a.length;i++)
	  {
		  String cmp[] = a[i].split("\\.");
		  if(cmp[0].compareTo(tmp[0]) == 0)
			  result = true;
	  }
	  return result;
  }
  
  public static String deleteSpace(String a) //delete trailing space
  {
	  int tmp = a.length()-2;
	  for(int i=a.length()-2; i>=0; i--)
	  {
		  if(a.charAt(i) != ' ') 
		  {
			  tmp = i;
			  break;
		  }
	  }
	  String b = a.substring(0, tmp+1) + "\'";
	  return b;
  }
  
  public static int dataType(String a) //distinguish datatype
  {
	  if(a.contains("'")) return 1;
	  else if(a.contains("-") && (a.charAt(0) != '-')) return 2;
	  else 
	  {
		  try
	  	  {
			  Integer.parseInt(a);
			  return 0;
	  	  }
		  catch(NumberFormatException e)
		  {
			  return 3;
		  }
	  }	  	
  }
  
  public static ArrayList<String> parseParen(String query) //parse parenthesis
  {
	  ArrayList<String> tmp = new ArrayList<String>();
	  String without_p = "";
	  String with_p = "";
	  int state = 0;
	  for(int i=0;i<query.length();i++)
	  {	  
		  
		  if(query.charAt(i) == ')')
		  {
			  state --;  
			  if(state == 0)
			  {
				  tmp.add(with_p);
				  with_p = "";
			  }
		  }
		  
		  if(state == 0)
		  {
			  without_p = without_p + query.charAt(i);
			  if(query.charAt(i) == ')')
				  without_p = without_p + "\"";
		  }
		  else
		  {
			  with_p = with_p + query.charAt(i);
		  }
			  
		  if(query.charAt(i) == '(')
		  {
			  state ++;
		  }
	  }
	  tmp.add(without_p);
	  return tmp;
  }
  
  public static int[] checkIf(String[] columns, String[] types, String[][] data, String query, int[] input) //the where clause
  {
	  
	  int[] output = input.clone();
	  int pcnt = 0;
	  ArrayList<String> p_querylist = new ArrayList<String>();
	  //ArrayList<int[]> p_list = new ArrayList<int[]>();
	  p_querylist = parseParen(query);
	  
	  /*
	  for(int i=0; i<p_querylist.size()-1;i++)
	  {
		  p_list.add(checkIf(columns, types, data, p_querylist.get(i), falsearr(input.length)));
	  }
	  */
	  String or_task[] = p_querylist.get(p_querylist.size()-1).split("or\"");
	  for(int i=0; i<or_task.length;i++) //divide by or block
	  {
		  if(allTrue(output)) break; //if all records return true then take shortcut
		  String and_task[] = or_task[i].split("and\"");
		  int[] outer_result = negate(falsearr(input.length));
		  
		  for(int j=0; j<and_task.length;j++) //divide by and block
		  {			  
			  if(allTrue(negate(outer_result))) break; //if all records return false then take shortcut
			  String tmp[] = and_task[j].split("\"");
			  boolean openparen = false;
			  boolean set = false;
			  int[] result = falsearr(input.length);
			  
			  if(tmp[0].compareTo("not") == 0) //has not
			  {
				  set = true;
			  }
			  
			  if(tmp[0].compareTo("()") == 0 || tmp[1].compareTo("()") == 0) //has parenthesis
			  {
				 openparen = true;
			  }
				  
			  if(!openparen)
			  {
				  for(int k=0; k<data.length; k++)
				  {
					  if((output[k] == 1) || (outer_result[k] == 0)) continue; //records that can take shortcut(already have fixed return value)
					  
					  int len;
					  if(set) len = tmp.length - 1;
					  else len = tmp.length;
					  			  
					  if(tmp[tmp.length-1].compareTo("null") == 0) //null predicate
					  {
						  int tmpl = 0;
						  int cnt = 0;
						  for(int l=0;l<columns.length;l++)
						  {
							  if(columnSearch(columns[l], tmp[tmp.length - len])) //search input columns
							  {
								  cnt++;
								  tmpl = l;
							  }
						  }
						  
						  if(cnt == 0)
						  {
							  String ttmp[] = tmp[tmp.length-len].split("\\.");
							  if(ttmp.length == 2)
							  {
								  if(!tableExists(columns, tmp[tmp.length-len]))
									  errorstring = "Where clause try to reference tables which are not specified";
								  else
									  errorstring = "Where clause try to reference non existing column";
							  }
							  else 
								  errorstring = "Where clause try to reference non existing column";
							  return falsearr(result.length);
						  }
						  else if(cnt >= 2)
						  {
							  errorstring = "Where clause contains ambiguous reference";
							  return falsearr(result.length);
						  }
						  else
						  {
							  if(len == 3)
							  {								  
								  if(data[k][tmpl].compareTo("null") == 0)
									  result[k] = 1;
							  }
							  else
							  {	
								  if(data[k][tmpl].compareTo("null") != 0)
									  result[k] = 1;
							  }
						  }
					  }
					  else //comparable predicate
					  {	  
						  int tmpl = 0;
						  int tmpl2 = 0;
						  int cnt = 0;
						  int cnt2 = 0;
						  int datatype = 0;
						  int dat1 = dataType(tmp[tmp.length-len]);
						  int dat2 = dataType(tmp[tmp.length-1]);
						  if(dat1 == 2) tmp[tmp.length-len] = deleteSpace(tmp[tmp.length-len]);
						  if(dat2 == 2) tmp[tmp.length-1] = deleteSpace(tmp[tmp.length-1]);
						  datatype = 4*dat1+dat2;
						  
						  if(dat1 == 3)
						  {
							  for(int l=0;l<columns.length;l++)
							  {
								  if(columnSearch(columns[l], tmp[tmp.length - len]))
								  {
									  cnt++;
									  tmpl = l;
								  }
							  }
						  }
						  else
						  {
							  cnt = 1;
						  }
						  
						  if(dat2 == 3)
						  {
							  for(int l=0;l<columns.length;l++)
							  {
								  if(columnSearch(columns[l], tmp[tmp.length - 1]))
								  {
									  cnt2++;
									  tmpl2 = l;
								  }
							  }
						  }
						  else
						  {
							  cnt2 = 1;
						  }	
						  					  
						  if(cnt == 0)
						  {
							  String ttmp[] = tmp[tmp.length-len].split("\\.");
							  if(ttmp.length == 2)
							  {
								  if(!tableExists(columns, tmp[tmp.length-len]))
									  errorstring = "Where clause try to reference tables which are not specified";
								  else
									  errorstring = "Where clause try to reference non existing column";
							  }
							  else 
								  errorstring = "Where clause try to reference non existing column";
							  return falsearr(result.length);
						  }
						  else if(cnt >= 2)
						  {
							  errorstring = "Where clause try to reference ambiguous column";
							  return falsearr(result.length);
						  }
						  else if(cnt2 == 0)
						  {
							  String ttmp[] = tmp[tmp.length-1].split("\\.");
							  if(ttmp.length == 2)
							  {
								  if(!tableExists(columns, tmp[tmp.length-len]))
									  errorstring = "Where clause try to reference tables which are not specified";
								  else
									  errorstring = "Where clause try to reference non existing column";
							  }
							  else 
								  errorstring = "Where clause try to reference non existing column";
							  return falsearr(result.length);
						  }
						  else if(cnt2 >= 2)
						  {
							  errorstring = "Where clause try to reference ambiguous column";
							  return falsearr(result.length);
						  }
						  else
						  {	
							  
							  switch(tmp[tmp.length-2]) //switch by compare operator
							  {
							  case ">=":						  
								  switch(datatype) //switch by datatype of two values
								  {
								  case 1:
									  //int & char
								  case 2:
									  //int & date
								  case 4:
								  	  //char & int	  
								  case 6:
									  //char & date
								  case 8:
									  //date & int
								  case 9:
									  //date & char
									  errorstring = "Where clause try to compare incomparable values";
									  return falsearr(result.length);
								  case 0:
									  if(Integer.parseInt(tmp[tmp.length-len]) >= Integer.parseInt(tmp[tmp.length-1]))
										  result[k] = 1;
									  break;
								  case 3:
									  //int & column
									  if(types[tmpl2].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;									  
										  else if(Integer.parseInt(tmp[tmp.length-len]) >= Integer.parseInt(data[k][tmpl2]))
									    	  result[k] = 1;
										  break;							
									  }
								  case 5:
								      //char & char
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length-1]) >= 0)
										  result[k] = 1;
									  break;
								  case 7:  
									  //char & column
									  if(types[tmpl2].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;									  
										  else if(tmp[tmp.length-len].compareTo(data[k][tmpl2]) >= 0)
											  result[k] = 1;
										  break;
									  }
								  case 10:
									  //date & date							  
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length - 1]) >= 0)
										  result[k] = 1;
									  break;		  
								  case 11:
									  //date & column
									  if(types[tmpl2].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;							  
										  else if(tmp[tmp.length - len].compareTo(data[k][tmpl2]) >= 0)
											  result[k] = 1;
										  break;
									  }
								  case 12:
									  //column & int
									  if(types[tmpl].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(data[k][tmpl]) >= Integer.parseInt(tmp[tmp.length-1]))
											  result[k] = 1;
										  break;
									  }
								  case 13:
									  //column & char
									  if(types[tmpl].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) >= 0)
											  result[k] = 1;
										  break;
									  }
								  case 14:
									  //column & date
									  if(types[tmpl].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) >= 0)
											  result[k] = 1;
										  break;
									  }
								  case 15:		
									  //column & column
									  if(types[tmpl].compareTo(types[tmpl2]) != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;					  
										  else if(types[tmpl].compareTo("int") == 0)
										  {
											  if(Integer.parseInt(data[k][tmpl]) >= Integer.parseInt(data[k][tmpl2]))
												  result[k] = 1;
										  }
										  else
										  {
											  if(data[k][tmpl].compareTo(data[k][tmpl2]) >= 0)
												  result[k] = 1;
										  }
										  break;
									  }
								  }								  						  
								  break;
							  case "<=":							 
								  switch(datatype)
								  {
								  case 1:
									  //int & char
								  case 2:
									  //int & date
								  case 4:
								  	  //char & int	  
								  case 6:
									  //char & date
								  case 8:
									  //date & int
								  case 9:
									  //date & char
									  errorstring = "Where clause try to compare incomparable values";
									  return falsearr(result.length);
								  case 0:
									  if(Integer.parseInt(tmp[tmp.length-len]) <= Integer.parseInt(tmp[tmp.length-1]))
										  result[k] = 1;
									  break;
								  case 3:
									  //int & column
									  if(types[tmpl2].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(tmp[tmp.length-len]) <= Integer.parseInt(data[k][tmpl2]))
									    	  result[k] = 1;
										  break;							
									  }
								  case 5:
								      //char & char
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length-1]) <= 0)
										  result[k] = 1;
									  break;
								  case 7:  
									  //char & column
									  if(types[tmpl2].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length-len].compareTo(data[k][tmpl2]) <= 0)
											  result[k] = 1;
										  break;
									  }
								  case 10:
									  //date & date							  
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length - 1]) <= 0)
										  result[k] = 1;
									  break;		  
								  case 11:
									  //date & column
									  if(types[tmpl2].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length - len].compareTo(data[k][tmpl2]) <= 0)
											  result[k] = 1;
										  break;
									  }
								  case 12:
									  //column & int
									  if(types[tmpl].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(data[k][tmpl]) <= Integer.parseInt(tmp[tmp.length-1]))
											  result[k] = 1;
										  break;
									  }
								  case 13:
									  //column & char
									  if(types[tmpl].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) <= 0)
											  result[k] = 1;
										  break;
									  }
								  case 14:
									  //column & date
									  if(types[tmpl].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) <= 0)
											  result[k] = 1;
										  break;
									  }
								  case 15:		
									  //column & column
									  if(types[tmpl].compareTo(types[tmpl2]) != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;					  
										  else if(types[tmpl].compareTo("int") == 0)
										  {
											  if(Integer.parseInt(data[k][tmpl]) <= Integer.parseInt(data[k][tmpl2]))
												  result[k] = 1;
										  }
										  else
										  {
											  if(data[k][tmpl].compareTo(data[k][tmpl2]) <= 0)
												  result[k] = 1;
										  }
										  break;
									  }
								  }								  
								  
								  break;
							  case "=":						 
								  switch(datatype)
								  {
								  case 1:
									  //int & char
								  case 2:
									  //int & date
								  case 4:
								  	  //char & int	  
								  case 6:
									  //char & date
								  case 8:
									  //date & int
								  case 9:
									  //date & char
									  errorstring = "Where clause try to compare incomparable values";
									  return falsearr(result.length);
								  case 0:
									  if(Integer.parseInt(tmp[tmp.length-len]) == Integer.parseInt(tmp[tmp.length-1]))
										  result[k] = 1;
									  break;
								  case 3:
									  //int & column
									  if(types[tmpl2].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(tmp[tmp.length-len]) == Integer.parseInt(data[k][tmpl2]))
									    	  result[k] = 1;
										  break;							
									  }
								  case 5:
								      //char & char
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length-1]) == 0)
										  result[k] = 1;
									  break;
								  case 7:  
									  //char & column
									  if(types[tmpl2].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length-len].compareTo(data[k][tmpl2]) == 0)
											  result[k] = 1;
										  break;
									  }
								  case 10:
									  //date & date							  
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length - 1]) == 0)
										  result[k] = 1;
									  break;		  
								  case 11:
									  //date & column
									  if(types[tmpl2].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length - len].compareTo(data[k][tmpl2]) == 0)
											  result[k] = 1;
										  break;
									  }
								  case 12:
									  //column & int
									  if(types[tmpl].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(data[k][tmpl]) == Integer.parseInt(tmp[tmp.length-1]))
											  result[k] = 1;
										  break;
									  }
								  case 13:
									  //column & char
									  if(types[tmpl].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) == 0)
											  result[k] = 1;
										  break;
									  }
								  case 14:
									  //column & date
									  if(types[tmpl].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) == 0)
											  result[k] = 1;
										  break;
									  }
								  case 15:		
									  //column & column
									  if(types[tmpl].compareTo(types[tmpl2]) != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;					  
										  else if(types[tmpl].compareTo("int") == 0)
										  {
											  if(Integer.parseInt(data[k][tmpl]) == Integer.parseInt(data[k][tmpl2]))
												  result[k] = 1;
										  }
										  else
										  {
											  if(data[k][tmpl].compareTo(data[k][tmpl2]) == 0)
												  result[k] = 1;
										  }
										  break;
									  }
								  }								  
								  break;
							  case "!=":
								  switch(datatype)
								  {
								  case 1:
									  //int & char
								  case 2:
									  //int & date
								  case 4:
								  	  //char & int	  
								  case 6:
									  //char & date
								  case 8:
									  //date & int
								  case 9:
									  //date & char
									  errorstring = "Where clause try to compare incomparable values";
									  return falsearr(result.length);
								  case 0:
									  if(Integer.parseInt(tmp[tmp.length-len]) != Integer.parseInt(tmp[tmp.length-1]))
										  result[k] = 1;
									  break;
								  case 3:
									  //int & column
									  if(types[tmpl2].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(tmp[tmp.length-len]) != Integer.parseInt(data[k][tmpl2]))
									    	  result[k] = 1;
										  break;							
									  }
								  case 5:
								      //char & char
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length-1]) != 0)
										  result[k] = 1;
									  break;
								  case 7:  
									  //char & column
									  if(types[tmpl2].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length-len].compareTo(data[k][tmpl2]) != 0)
											  result[k] = 1;
										  break;
									  }
								  case 10:
									  //date & date							  
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length - 1]) != 0)
										  result[k] = 1;
									  break;		  
								  case 11:
									  //date & column
									  if(types[tmpl2].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length - len].compareTo(data[k][tmpl2]) != 0)
											  result[k] = 1;
										  break;
									  }
								  case 12:
									  //column & int
									  if(types[tmpl].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(data[k][tmpl]) != Integer.parseInt(tmp[tmp.length-1]))
											  result[k] = 1;
										  break;
									  }
								  case 13:
									  //column & char
									  if(types[tmpl].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) != 0)
											  result[k] = 1;
										  break;
									  }
								  case 14:
									  //column & date
									  if(types[tmpl].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) != 0)
											  result[k] = 1;
										  break;
									  }
								  case 15:		
									  //column & column
									  if(types[tmpl].compareTo(types[tmpl2]) != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;					  
										  else if(types[tmpl].compareTo("int") == 0)
										  {
											  if(Integer.parseInt(data[k][tmpl]) != Integer.parseInt(data[k][tmpl2]))
												  result[k] = 1;
										  }
										  else
										  {
											  if(data[k][tmpl].compareTo(data[k][tmpl2]) != 0)
												  result[k] = 1;
										  }
										  break;
									  }							  
								  }
								  break;
							  case ">":
								  switch(datatype)
								  {
								  case 1:
									  //int & char
								  case 2:
									  //int & date
								  case 4:
								  	  //char & int	  
								  case 6:
									  //char & date
								  case 8:
									  //date & int
								  case 9:
									  //date & char
									  errorstring = "Where clause try to compare incomparable values";
									  return falsearr(result.length);
								  case 0:
									  if(Integer.parseInt(tmp[tmp.length-len]) > Integer.parseInt(tmp[tmp.length-1]))
										  result[k] = 1;
									  break;
								  case 3:
									  //int & column
									  if(types[tmpl2].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(tmp[tmp.length-len]) > Integer.parseInt(data[k][tmpl2]))
									    	  result[k] = 1;
										  break;							
									  }
								  case 5:
								      //char & char
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length-1]) > 0)
										  result[k] = 1;
									  break;
								  case 7:  
									  //char & column
									  if(types[tmpl2].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length-len].compareTo(data[k][tmpl2]) > 0)
											  result[k] = 1;
										  break;
									  }
								  case 10:
									  //date & date							  
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length - 1]) > 0)
										  result[k] = 1;
									  break;		  
								  case 11:
									  //date & column
									  if(types[tmpl2].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length - len].compareTo(data[k][tmpl2]) > 0)
											  result[k] = 1;
										  break;
									  }
								  case 12:
									  //column & int
									  if(types[tmpl].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(data[k][tmpl]) > Integer.parseInt(tmp[tmp.length-1]))
											  result[k] = 1;
										  break;
									  }
								  case 13:
									  //column & char
									  if(types[tmpl].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) > 0)
											  result[k] = 1;
										  break;
									  }
								  case 14:
									  //column & date
									  if(types[tmpl].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) > 0)
											  result[k] = 1;
										  break;
									  }
								  case 15:		
									  //column & column
									  if(types[tmpl].compareTo(types[tmpl2]) != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;					  
										  else if(types[tmpl].compareTo("int") == 0)
										  {
											  if(Integer.parseInt(data[k][tmpl]) > Integer.parseInt(data[k][tmpl2]))
												  result[k] = 1;
										  }
										  else
										  {
											  if(data[k][tmpl].compareTo(data[k][tmpl2]) > 0)
												  result[k] = 1;
										  }
										  break;
									  }
								  }								  
								  break;
							  case "<":
								  switch(datatype)
								  {
								  case 1:
									  //int & char
								  case 2:
									  //int & date
								  case 4:
								  	  //char & int	  
								  case 6:
									  //char & date
								  case 8:
									  //date & int
								  case 9:
									  //date & char
									  errorstring = "Where clause try to compare incomparable values";
									  return falsearr(result.length);
								  case 0:
									  if(Integer.parseInt(tmp[tmp.length-len]) < Integer.parseInt(tmp[tmp.length-1]))
										  result[k] = 1;
									  break;
								  case 3:
									  //int & column
									  if(types[tmpl2].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(tmp[tmp.length-len]) < Integer.parseInt(data[k][tmpl2]))
									    	  result[k] = 1;
										  break;							
									  }
								  case 5:
								      //char & char
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length-1]) < 0)
										  result[k] = 1;
									  break;
								  case 7:  
									  //char & column
									  if(types[tmpl2].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length-len].compareTo(data[k][tmpl2]) < 0)
											  result[k] = 1;
										  break;
									  }
								  case 10:
									  //date & date							  
									  if(tmp[tmp.length-len].compareTo(tmp[tmp.length - 1]) < 0)
										  result[k] = 1;
									  break;		  
								  case 11:
									  //date & column
									  if(types[tmpl2].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;
										  else if(tmp[tmp.length - len].compareTo(data[k][tmpl2]) < 0)
											  result[k] = 1;
										  break;
									  }
								  case 12:
									  //column & int
									  if(types[tmpl].compareTo("int") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(Integer.parseInt(data[k][tmpl]) < Integer.parseInt(tmp[tmp.length-1]))
											  result[k] = 1;
										  break;
									  }
								  case 13:
									  //column & char
									  if(types[tmpl].compareTo("char") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) < 0)
											  result[k] = 1;
										  break;
									  }
								  case 14:
									  //column & date
									  if(types[tmpl].compareTo("date") != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl].compareTo(tmp[tmp.length-1]) < 0)
											  result[k] = 1;
										  break;
									  }
								  case 15:		
									  //column & column
									  if(types[tmpl].compareTo(types[tmpl2]) != 0)
									  {
										  errorstring = "Where clause try to compare incomparable values";
										  return falsearr(result.length);
									  }
									  else
									  {
										  if(data[k][tmpl].compareTo("null") == 0)
											  result[k] = 2;
										  else if(data[k][tmpl2].compareTo("null") == 0)
											  result[k] = 2;					  
										  else if(types[tmpl].compareTo("int") == 0)
										  {
											  if(Integer.parseInt(data[k][tmpl]) < Integer.parseInt(data[k][tmpl2]))
												  result[k] = 1;
										  }
										  else
										  {
											  if(data[k][tmpl].compareTo(data[k][tmpl2]) < 0)
												  result[k] = 1;
										  }
										  break;
									  }
								  }								  
								  break;
							  }				  
						  }					
					  }
				  }
			  }
			  else
			  {
				 int[] tmp2 = new int[input.length];
				 for(int k=0; k<input.length;k++)
				 {
					 if((output[k] == 1) || (outer_result[k] == 0)) //give 1(can take or shortcut) to records that must take shortcut
						 tmp2[k] = 1;
					 else
						 tmp2[k] = 0;
				 }
				 result = checkIf(columns, types, data, p_querylist.get(pcnt), tmp2); //recursive parenthesis query
				 pcnt++;
			  }
			  
			  if(set) //if query has 'not' 
			  {
				  for(int k=0; k<input.length; k++)
				  {
					  if((output[k] != 1) && (outer_result[k] != 0)) //calculate only not shortcut records
					  {
						  if(result[k] == 0) result[k] = 1;
						  else if(result[k] == 1) result[k] = 0;
						  else result[k] = 2;
					  }
				  }
			  }
			  for(int k=0; k<input.length; k++)
			  {
				  if((output[k] != 1) && (outer_result[k] != 0)) //calculate only not shortcut records
					  outer_result[k] = andTest(outer_result[k],result[k]);
			  }
			  
		  }	 
		  for(int k=0; k<input.length; k++)
		  {
			  if(output[k] != 1) //calculate only not shortcut records
				  output[k] = orTest(output[k],outer_result[k]);
		  }
	  }
	  return output;
  }

  public static void operateDataBase(int q)
  {
	DatabaseEntry foundKey;
    DatabaseEntry foundData;
    boolean exist = false;
    String queryString = "";
    switch(q)
    {
      case PRINT_CREATE_TABLE:
      	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	    
    	  cursor = myDatabase.openCursor(null, null);
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    		  do {
    		      String keyString = new String(foundKey.getData(),"UTF-8");
    		      if(keyString.compareTo(namestring) == 0) //find if same name table exists
    		      {
    		    	  errorstring = "Create table has failed: table with the same name already exists";
    		    	  break;
    		      }
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		    
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	    
    	  if(errorstring.compareTo("") == 0)
    	  {
    	      String columns[] = valuestring.split("\"#");
    	      int rnum[] = new int[columns.length];
    	      int prinum = 0;
    	      boolean sum = false;
    	      for(int i=0;i<columns.length;i++)
    	      {
    	      	  String str[] = columns[i].split("\"");
    	    	  exist = false;
    	    	  switch(str[0])
    	    	  {
    	    	  case "primary key":
    	    		  prinum++;
    	    		  if(prinum == 2) 
    	        	  {
    	        	  	  errorstring = "Create table has failed: primary key definition is duplicated"; //minimal two definition detected
    	        		  break;
    	        	  }
    	    		  //parse primary key line
    	    	      int num = str.length-1;
    	    	      String names[] = new String[num];
    	    	      for(int j=1;j<=num;j++)
    	    	      {
    	    	          names[j-1] = str[j];
    	    	      }
    	    	      for(int j=0;j<num;j++)
    	    	      {
    	    	    	  int k=0;
    	    	          for(k=0;k<columns.length;k++)
    	    	          {
    	    	        	  if(k == i) continue;
    	    	        	  String tmp5[] = columns[k].split("\"");
    	    	        	  if(tmp5[0].compareTo(names[j]) == 0)  //find columns from table
    	    	        	  {
    	    	        	  	  if(tmp5.length == 2) columns[k] = columns[k] + "\"not null"; //if a column not contains not null constraint, add
    	    	        		  sum = true;
    	    	        		  break;
    	    	        	  }
    	    	        			
    	    	          }
    	    	          if(k==columns.length)  //not exist in column definition
    	    	          {
    	    	        	  errorstring = "Create table has failed: '" + names[j] + "' does not exists in column definition";
    	    	        	  break;
    	    	          }
    	    	      }
    	    		  break;
    	    	  case "foreign key":
    	    		  int num1, num2;
    	    		  int j;
    	    		  //parse foreign key line
    	    		  for(j=1;j<str.length;j++)
    	    		  {
    	    			  if(str[j].compareTo("references") == 0) break;
    	    		  }
    	    		  num1 = j-1;
    	    		  num2 = str.length - num1 - 3;
    	    		  if(num1 != num2) //different numbers between column and referencing column
    	    		  {
    	    		      errorstring = "Create table has failed: foreign key references wrong type";
    	    			  break;
    	    		  }
    	    		  else
    	    		  {
    	    		   	  //parse data into arrays
    	    			  String cur_names[] = new String[num1];
    	    			  String ref_tabname = str[j+1].substring(1, str[j+1].length());
    	    			  String ref_names[] = new String[num1];
    	    			  //String tab_data[] = new String[num];
    	    			  String types[] = new String[num1];
    	    			  for(int k=0;k<num1;k++)
    	    			  {
    	    			      cur_names[k] = str[1+k];
    	    			      ref_names[k] = str[num1+3+k];
    	    			  }
    	    			    
    	    			  DatabaseEntry foundKey2 = new DatabaseEntry();
    	    			  DatabaseEntry foundData2 = new DatabaseEntry();
    	    			  cursor = myDatabase.openCursor(null, null);
    	    			  try
    	    			  {
    	    			      cursor.getFirst(foundKey2,foundData2,LockMode.DEFAULT);  	
    	    				  do {
    	    				      String keyString = new String(foundKey2.getData(),"UTF-8");
    	    				      queryString = new String(foundData2.getData(),"UTF-8");
    	    				      if(keyString.compareTo(ref_tabname) == 0) //find the same name table(referencing table)
    	    				      {
    	    				      	  exist = true;
    	    				    	  break;
    	    				      }
    	    				  } while (cursor.getNext(foundKey2, foundData2, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    	    			  } catch(Exception e){
    	    			    	
    	    			  }
    	    			  cursor.close();
    	    			  if(!exist) errorstring = "Create table has failed: foreign key references non existing table"; //referencing table not exists
    	    			  else 
    	    			  {
    	    			      String tmp2[] = queryString.split("\"#");
    	    			      for(int k=0;k<num1;k++)
    	    			      {
    	    			    	  int l;
    	    				      for(l=0;l<tmp2.length;l++)
    	    				      {
    	    				    	  String tmp3[] = tmp2[l].split("\"");
    	    				    	  if(tmp3[0].compareTo(ref_names[k]) == 0) //find columns that has same name in referencing table 
    	    				    	  {
    	    				    		  //tab_data[j] = tmp2[i];
    	    				    		  types[k] = tmp3[1];
    	    				    		  break;
    	    				    	  }
    	    				      }
    	    				      if (l==tmp2.length) //no matching column found
    	    				      {
    	    				    	  errorstring = "Create table has failed: foreign key references non existing column";
    	    				    	  exist = false;
    	    				    	  break;
    	    				      }
    	    			      }
    	    			    	
    	    			      if(exist)
    	    			      {
    	    				      for(int k=0;k<tmp2.length;k++)
    	    				      {
    	    				    	  String tmp3[] = tmp2[k].split("\"");
    	    				    	  if(tmp3[0].compareTo("primary key") == 0) 
    	    				    	  {
    	    				    		  if((tmp3.length-1) != num1) //number is not same with primary key set
    	    				    		  {
    	    				    			  errorstring = "Create table has failed: foreign key references non primary key column";
    	    				    		  }
    	    				    		  else
    	    				    		  {
    		    				    		  for(int l=0;l<num1;l++)
    		    				    	      {
    		    				    			  if(!tmp2[k].contains(ref_names[l])) //primary key not contains referencing column 
    		    				    			  {
    		    				    				  errorstring = "Create table has failed: foreign key references non primary key column";
    		    				    		    	  break;
    		    				    			  }
    		    				    	      }
    	    				    		  }
    	    				    	  }
    	    				      }
    	    				      for(int k=0;k<num1;k++)
    	    				      {
    	    				    	  int l=0;
    	    					      for(l=0;l<columns.length;l++) //find columns that has same name
    	    					      {
    	    					    	  String tmp4[] = columns[l].split("\"");
    	    					    	  if(tmp4[0].compareTo(cur_names[k]) == 0) 
    	    					    	  {
    	    					    		  //tab_data[j] = tmp2[i];    					    			
    	    					    		  if(rnum[l] == 1) 
    	    					    		  {
    	    					    			  errorstring = "Create table has failed: foreign key definition is duplicated";
    	    					    			  break;
    	    					    		  }
    	    					    		  else rnum[l]++;
    	    					    				
    	    					    		  if(types[k].compareTo(tmp4[1]) != 0) //compare types with referencing column
    	    					    			  errorstring = "Create table has failed: foreign key references wrong type";
    	    					    		  break;
    	    					    	  }
    	    					      }
    	    					    	
    	    					      if(l==columns.length)  //not exist in column definition
    	    		    	          {
    	    		    	              errorstring = "Create table has failed: '" + cur_names[k] + "' does not exists in column definition";
    	    		    	        	  break;
    	    		    	          }
    	    				      }
    	    			      }
    	    			  }
    	    		  }
    	    		  break;
    	    	  default:
    	    		  //no need to parse 
    	    		  break;
    	    	  }
    	    	  if(errorstring.compareTo("") != 0) break;    	
    	      }
    	      if(sum) //some string need to be re-parsed(add not null constraint)
    	      {
    	    	  String newstring = "";
    	    	  for(int i=0;i<columns.length;i++)
    	    	  {
    	    		  newstring = newstring + columns[i] + "\"#";
    	    	  }
    	    	  valuestring = new String(newstring);
    	      }
    	  }
    	  DatabaseEntry key;
    	  DatabaseEntry data;
    	  if(errorstring.compareTo("") == 0) { //no error -> create table into database
    	      try {
    		      cursor = myDatabase.openCursor(null, null);
    		      valuestring = valuestring + "\"%";
    		      key = new DatabaseEntry(namestring.getBytes("UTF-8"));
    		      data = new DatabaseEntry(valuestring.getBytes("UTF-8"));
    		      cursor.put(key, data);
    		      cursor.close();
    		  } catch (DatabaseException de) {
    		    	
    		  } catch (UnsupportedEncodingException e) {
    		      e.printStackTrace();
    		  }
    		      System.out.println("'" + namestring + "' table is created");   
    	  }
    	  else
    		 System.out.println(errorstring); //error
    	  break;
      case PRINT_DROP_TABLE:
    	  cursor = myDatabase.openCursor(null, null);
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    		  do {
    		      queryString = new String(foundData.getData(),"UTF-8");
    		      String f_string = "/" + valuestring + "\""; //table name identifier + table name + delimiter
    		      if(queryString.contains(f_string)) errorstring = "Drop table has failed: '" + valuestring + "' is referenced by other table"; //it is referenced by other table
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    	  } catch(Exception e){
    	    	
    	  }
    	    
    	  cursor.close();
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  if(errorstring.compareTo("") == 0) //no referential error
    	  {
    	      cursor = myDatabase.openCursor(null, null);
    		  try
    		  {
    		      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    			  do {
    			      String keyString = new String(foundKey.getData(),"UTF-8");
    			      if(keyString.compareTo(valuestring) == 0) //find table from database
    			      {
    			    		exist = true;
    			    		break;
    			      }
    			  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		  } catch(Exception e){
    		    	
    		  }
    		  if(exist) //exist
    		  {
    		      cursor.delete();
    		      System.out.println("'" + valuestring + "' table is dropped");
    		  }
    		  else System.out.println("No such table"); //no such table error
    		  cursor.close();
    	  }
    	  else
    	      System.out.println(errorstring); //referential error
    	  break;
      case PRINT_DESC:
    	  cursor = myDatabase.openCursor(null, null);
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);
    		  do {
    		      String keyString = new String(foundKey.getData(),"UTF-8");
    		      queryString = new String(foundData.getData(),"UTF-8");
    		      if(keyString.compareTo(valuestring) == 0) //find table from database
    		      {
    		    		exist = true; 
    		    		break;
    		      }
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	    
    	    if(exist)
    	    {
    	    	//parse data
    	    	//System.out.println(queryString);
    	    	String schema[] = queryString.split("\"%");
    		    String spl[] = schema[0].split("\"#");
    		    String column_name[] = new String[spl.length];
    		    String type[] = new String[spl.length];
    		    boolean nullity[] = new boolean[spl.length]; 
    		    int keys[] = new int[spl.length];
    		    
    		    for(int i=0;i<spl.length;i++)
    		    {
    		    	String spl2[] = spl[i].split("\"");
    		    	column_name[i] = spl2[0];
    		    	keys[i] = 0;
    		    }
    		  
    		    
    		    for(int i=0;i<spl.length;i++)
    		    {
    		    	String spl2[] = spl[i].split("\"");
    		    	switch(spl2[0])
    		    	{
    		    	case "primary key":
    		    		for(int j=1; j<spl2.length;j++)
    		    		{
    		    			int k;
    		    			for(k=0;k<spl.length;k++)
    		    			{
    		    				if(spl2[j].compareTo(column_name[k]) == 0)
    		    					break; //exit
    		    			}
    		    			keys[k] += 1;
    		    		}
    		    		break;
    		    	case "foreign key":
    		    		for(int j=1; j<spl2.length;j++)
    		    		{
    		    			if(spl2[j].compareTo("references") == 0) break;
    		    			int k;
    		    			for(k=0;k<spl.length;k++)
    		    			{
    		    				if(spl2[j].compareTo(column_name[k]) == 0)
    		    					break; //exit
    		    			}
    		    			keys[k] += 2;
    		    		}
    		    		break;
    		    	default:
    		    		column_name[i] = spl2[0];
    		    		type[i] = spl2[1];
    		    		if (spl[i].contains("not null")) nullity[i] = false; else nullity[i] = true;
    		    		break;
    		    	}
    		    }
    		    //print parsed data
    		    System.out.println("----------------");
    		    System.out.println("table_name [" + valuestring + "]");
    		    System.out.println("column_name type null key"); 
    		    for(int i=0;i<spl.length;i++)
    		    {
    		    	switch(column_name[i])
    		    	{
    		    	case "primary key":
    		    	case "foreign key":
    		    		break;
    		    	default:
    			    	System.out.print(column_name[i] + " ");
    			    	System.out.print(type[i] + " ");
    			    	if(nullity[i] == false) System.out.print("N "); else System.out.print("Y ");
    			    	if(keys[i] == 3) System.out.print("PRI/FOR"); 
    			    	else if (keys[i] == 2) System.out.print("FOR"); 
    			    	else if (keys[i] == 1) System.out.print("PRI");
    			    	System.out.println("");
    			    	break;
    		    	}
    		    }
    		    System.out.println("----------------");
    	    }
    	    else
    	    	System.out.println("No such table"); //no such table error
    	  break;
      case PRINT_SHOW_TABLES:
    	  cursor = myDatabase.openCursor(null, null);
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);
    	      if(foundKey.getData() != null)
    	    	  System.out.println("----------------");
    	      else
    	    	  System.out.println("There is no table"); //no table error
    		  do {
    		      String keyString = new String(foundKey.getData(),"UTF-8");
    		      System.out.println(keyString); //print all tables
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		  System.out.println("----------------");
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	  break;
      case PRINT_INSERT:
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  exist = false;
    	  String keyString = null;
    	  String DataString = null;
    	    
    	  cursor = myDatabase.openCursor(null, null);
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    		  do {
    		      keyString = new String(foundKey.getData(),"UTF-8");
    		      if(keyString.compareTo(namestring) == 0) //find if the table exists
    		      {
    		    	  DataString = new String(foundData.getData(),"UTF-8");
    		    	  exist = true;
    		      }
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		    
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	  if(exist) //table exists.
    	  {
    		  String[] tmp1 = DataString.split("\"%");
    		  String[] spl = tmp1[0].split("\"#"); //scheme
    		  String column_name[] = new String[spl.length];
  		      String type[] = new String[spl.length];
  		      String primaryLine[] = {}; //primary key 
  		      ArrayList<String[]> foreignLine = new ArrayList<String[]>(); //foreign key query line
  		      boolean nullity[] = new boolean[spl.length]; 
  		      int count = 0;
  		      
  		      for(int i=0;i<spl.length;i++)
  		      {
  		    	  String spl2[] = spl[i].split("\"");
  		    	  switch(spl2[0])
  		    	  {
  		    	  case "primary key":
  		    		  primaryLine = spl2.clone(); //add primary
  		    		  break;
  		    	  case "foreign key":
  		    		  foreignLine.add(spl2); //add foreign
  		    		  break;
  		    	  default:
  		    		  column_name[count] = spl2[0];
  		    		  type[count] = spl2[1];
  		    		  if (spl[i].contains("not null")) nullity[count] = false; else nullity[count] = true;
  		    		  count ++;
  		    		  break;
  		    	  }
  		      }

        	  String record[] = new String[count];
        	  
        	  String values[] = valuestring.split("\"");
        	  
        	  
        	  if(values[0].compareTo("values") == 0) //column not specified
        	  {
        		  for(int i=1; i<values.length;i++)
        		  {
        			  if(count != (values.length-1))
        			  {
        				  errorstring = "Insertion has failed: Types are not matched";
        				  break;
        			  }
        			  if(values[i].contains("\'"))
        			  {
        				  if(!(type[i-1].contains("char")))
        				  {
        					  errorstring = "Insertion has failed: Types are not matched";
        				  }
        				  else
        				  {
        					  values[i] = deleteSpace(values[i]);
        					  int num = Integer.parseInt(type[i-1].substring(5, type[i-1].length()-1));
        					  if(values[i].length() > num+2)
        						  record[i-1] = values[i].substring(0, num+1) + "\'";
        					  else 
        						  record[i-1] = values[i];
        				  }
        			  }
        			  else if(values[i].contains("-") && (values[i].charAt(0) != '-'))
        			  {
        				  if(type[i-1].compareTo("date") != 0)
        					  errorstring = "Insertion has failed: Types are not matched";
        				  else
        				  {
        					  record[i-1] = values[i];
        				  }
        			  }
        			  else
        			  {
        				  if(values[i].compareTo("null") == 0)
        				  {
        					  if(nullity[i-1] == false)
        						  errorstring = "Insertion has failed: '" + column_name[i-1] + "' is not nullable";
        					  else
        					  {
            					  record[i-1] = values[i];
            				  }
        				  }
        				  else
        				  {
        					  if(type[i-1].compareTo("int") != 0)
        						  errorstring = "Insertion has failed: Types are not matched";
        					  else
            				  {
        						  if(values[i].charAt(0) == '+')
        							  record[i-1] = values[i].substring(1, values[i].length());
        						  else
        							  record[i-1] = values[i];
            				  }
        				  }
        			  }
        		  }
        	  }
        	  else //column specified
        	  {
        		  if(values.length % 2 == 0 || values[(values.length-1)/2].compareTo("values") != 0)
        		  {
        			  errorstring = "Insertion has failed: Types are not matched";
        		  }
        		  else
        		  {
        			  int limit = (values.length-1)/2;
	        		  for(int i=0; i<limit;i++)
	        		  {
	        			  int j = 0;
	        			  for(j=0; j<count; j++)
	        			  {
	        				  if(values[i].compareTo(column_name[j]) == 0)
	        					  break;
	        			  }
	        			  if(j == count)
	        				  errorstring = "Insertion has failed: '"+ values[i] + "' does not exist";
	        			  else
	        			  {
		        			  if(values[i+limit+1].contains("\'"))
		        			  {
		        				  if(!(type[j].contains("char")))
		        					  errorstring = "Insertion has failed: Types are not matched";
		        				  else
	            				  {
		        					  int num = Integer.parseInt(type[j].substring(5, type[j].length()-1));
		        					  if(values[i].length() > num+2)
		        						  record[j] = values[i+limit+1].substring(0, num+1) + "\'";
		        					  else 
		        						  record[j] = values[i+limit+1];
	            				  }
		        			  }
		        			  else if(values[i+limit+1].contains("-") && (values[i+limit+1].charAt(0) != '-'))
		        			  {
		        				  if(type[j].compareTo("date") != 0)
		        					  errorstring = "Insertion has failed: Types are not matched";
		        				  else
	            				  {
	            					  record[j] = values[i+limit+1];
	            				  }
		        			  }
		        			  else
		        			  {
		        				  if(values[i+limit+1].compareTo("null") == 0)
		        					  if(nullity[j] == false)
		        						  errorstring = "Insertion has failed: '" + column_name[j] + "' is not nullable";
		        					  else
		            				  {
		            					  record[j] = values[i+limit+1];
		            				  }
		        				  else
			        				  if(type[j].compareTo("int") != 0)
			        					  errorstring = "Insertion has failed: Types are not matched";
			        				  else
		            				  {
			        					  if(values[i+limit+1].charAt(0) == '+')
			        						  record[j] = values[i+limit+1].substring(1, values[i+limit+1].length());
		        						  else
		        							  record[j] = values[i+limit+1]; 					  
		            				  }
		        			  }
	        			  }
	        		  }
        		  }
        	  }	
        	  if(errorstring.compareTo("") == 0)
        	  {
	        	  valuestring = "";
	        	  for(int i=0;i<count; i++)
	        	  {
	        		  if(record[i] != null)
	        			  valuestring = valuestring + record[i] + "\"";
	        		  else
	        			  if(!nullity[i])
	        			  {
	        				  errorstring = "Insertion has failed: '" + column_name[i] + "' is not nullable";
	        				  break;
	        			  }
	        			  else 
	        				  valuestring = valuestring + "null\""; 
	        	  }
        	  }
        	  
        	  if(tmp1.length == 2) //table has data
        	  {
	        	  if(errorstring.compareTo("") == 0) 
	        	  {
	        		  String[] dataLine = tmp1[1].split("\"#");
	        		  ArrayList<Integer> primaryCol = new ArrayList<Integer>();
	        	      String[][] tableData = new String[dataLine.length][count];
	        	      
	        	      for(int i=0;i<dataLine.length;i++)
	        	      {
	        	    	  tableData[i] = dataLine[i].split("\"");
	        	      }
	        	      	     
	        	      for(int i=1;i<primaryLine.length;i++)
	        	      {
	        	    	  for(int j=0;j<count;j++)
	        	    	  {	  
	        	    		  if(primaryLine[i].compareTo(column_name[j]) == 0)
	        	    		  {
	        	    			  primaryCol.add(j);
	        	    			  break;
	        	    		  }
	        	    	  }
	        	      }
	        	      
	        	      if(!primaryCol.isEmpty()) //table has primary columns
	        	      {        	      
		        	      for(int i=0;i<dataLine.length;i++)
		        	      {
		        	    	  boolean isSame = true;
		        	    	  for(int j=0;j<primaryCol.size(); j++)
		        	    	  {
		        	    		  if(record[primaryCol.get(j)].compareTo(tableData[i][primaryCol.get(j)]) != 0)
		        	    			 isSame = false;
		        	    	  }
		        	    	  if(isSame)
		        	    	  {
		        	    		  errorstring = "Insertion has failed: Primary key duplication";
		        	    		  break;
		        	    	  }
		        	      }
	        	      }
	        	  }
        	  }
        	  
        	  if(errorstring.compareTo("") == 0) 
        	  {       		  
        	      for(int i=0; i<foreignLine.size();i++) //foreign constraint check
        	      {
        	    	  boolean canInsert = false;
        	    	  int num = (foreignLine.get(i).length - 3) / 2;
        	    	  String[] refCol = new String[num];
            	      String[] foreignCol = new String[num];
            	      int[] refColNum = new int[num];
            	      int[] foreignColNum = new int[num];
            	      String foreignName = foreignLine.get(i)[num+2].substring(1, foreignLine.get(i)[num+2].length());
            	      refCol = Arrays.copyOfRange(foreignLine.get(i), 1, num+1);
            	      foreignCol = Arrays.copyOfRange(foreignLine.get(i), num+3, foreignLine.get(i).length);
            	      String f_key = "";
            	      String f_data = "";
            	      
            	      for(int j=0; j<num; j++)
            	      {
            	    	  for(int k=0; k<count; k++)
            	    	  {
            	    		  if(refCol[j].compareTo(column_name[k]) == 0)
            	    		  {
            	    			  refColNum[j] = k; 
            	    			  break;
            	    		  }
            	    	  }
            	      }
            	      cursor = myDatabase.openCursor(null, null);
            	      try {		      
            		      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
            		      do {
            		    	  f_key = new String(foundKey.getData(),"UTF-8");        		    	 
                		      if(f_key.compareTo(foreignName) == 0) //find if the table exists
                		      {
                		    	  f_data = new String(foundData.getData(),"UTF-8");
                		    	  break;
                		      }
                		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
            		      

            		  } catch (Exception e) {
            			  
            		  }
            	      cursor.close();
            	      String[] parse = f_data.split("\"%");
            	      
            	      if(parse.length == 1)
            	      {
            	    	  canInsert = false;
            	      }
            	      else
            	      {
            	    	  String[] f_scheme = parse[0].split("\"#");           	    	  
            	    	  String[] f_record = parse[1].split("\"#");
            	    	  String[][] f_records = new String[f_record.length][];
            	    	  for(int j=0; j<num; j++)
            	    	  {
            	    		  int cnt = 0;
            	    		  for(int k=0; k<f_scheme.length; k++)
            	    		  {
            	    			  boolean find = false;
            	    			  String[] tmp = f_scheme[k].split("\"");
            	    			  switch(tmp[0])
            	    			  {
            	    			  case "primary key":
            	    				  break;
            	    			  case "foreign key":
            	    				  break;
            	    			  default:
            	    				  if(tmp[0].compareTo(foreignCol[j]) == 0)
            	    				  {
            	    					  foreignColNum[j] = cnt;
            	    					  find = true;
            	    				  }
            	    			      cnt++;
            	    			  	  break;
            	    			  }
            	    			  if(find) break;
            	    		  }
            	    	  }
            	    	  for(int j=0; j<f_record.length; j++)
            	    		  f_records[j] = f_record[j].split("\"");
            	    	  
            	    	  for(int j=0; j<f_records.length;j++)
            	    	  {
            	    		  boolean same = true;
            	    		  for(int k=0; k<num; k++)
            	    		  {
            	    			  if(f_records[j][foreignColNum[k]].compareTo(record[refColNum[k]]) != 0)
            	    			  {
            	    				  if(record[refColNum[k]].compareTo("null") == 0) 
            	    				  {	
            	    					  same = true;
            	    					  break;
            	    				  }
            	    				  same = false;
            	    			  }
            	    		  }
            	    		  if(same)
            	    		  {
            	    			  canInsert = true;
            	    			  break;
            	    		  }
            	    	  } 
            	      }                 	      
            	      if(!canInsert)
            	      {
            	    	  errorstring = "Insertion has failed: Referential integrity violation";
            	    	  break;
            	      }
            	    	  
        	      }
        	  }
        	  
    	  }
    	  else
    		  errorstring = "No such table";
    	  
  
    	  //System.out.println(valuestring);
    	  
    	  if(errorstring.compareTo("") == 0) { //no error -> create table into database
    		  cursor = myDatabase.openCursor(null, null);
    	      try {		      
    		      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    		      do {
        		      keyString = new String(foundKey.getData(),"UTF-8");
        		      if(keyString.compareTo(namestring) == 0) //find if the table exists
        		      {
        		    	  break;
        		      }
        		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		      valuestring = DataString + valuestring + "#";
    		      foundKey = new DatabaseEntry(keyString.getBytes("UTF-8"));
    		      foundData = new DatabaseEntry(valuestring.getBytes("UTF-8"));
    		      cursor.delete();
    		      cursor.put(foundKey, foundData);

    		  } catch (Exception e) {
    			  
    		  }
    	      cursor.close();
    		  System.out.println("The row is inserted");   
    	  }
    	  else
    		 System.out.println(errorstring); //error
    	  
    	  break;
      case PRINT_DELETE:
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  exist = false;
    	  String keyStringd = null;
    	  String DataStringd = null;
    	    
    	  cursor = myDatabase.openCursor(null, null);
    	  try
    	  {
    	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
    		  do {
    			  keyStringd = new String(foundKey.getData(),"UTF-8");
    		      if(keyStringd.compareTo(namestring) == 0) //find if the table exists
    		      {
    		    	  DataStringd = new String(foundData.getData(),"UTF-8");
    		    	  exist = true;
    		      }
    		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    		    
    	  } catch(Exception e){
    	    	
    	  }
    	  cursor.close();
    	  if(exist) //if table exists
    	  {
    		  String[] tmp1 = DataStringd.split("\"%");
    		  String[] spl = tmp1[0].split("\"#");
    		  String column_name[] = new String[spl.length];
  		      String type[] = new String[spl.length];
  		      boolean nullity[] = new boolean[spl.length]; 
  		      int keys[] = new int[spl.length];
  		      int count = 0;
  		      int prinum = 0;
  		    
  		      for(int i=0;i<spl.length;i++)
  		      {
  		    	  keys[i] = 0;
  		      }
  		  
  		      for(int i=0;i<spl.length;i++)
  		      {
  		    	  String spl2[] = spl[i].split("\"");
  		    	  switch(spl2[0])
  		    	  {
  		    	  case "primary key":
  		    		  prinum = i;
  		    		  break;
  		    	  case "foreign key":
  		    		  break;
  		    	  default:
  		    		  column_name[count] = spl2[0]; 
  		    		  type[count] = spl2[1];
  		    		  if (spl[i].contains("not null")) nullity[count] = false; else nullity[count] = true;
  		    		  count ++;
  		    		  break;
  		    	  }
  		      }
  		        
    		  
  		      String columnname[] = Arrays.copyOfRange(column_name, 0, count); //name of columns in order
  		      String types[] = Arrays.copyOfRange(type, 0, count); //types
  		      String datastring[];
  		      if(tmp1.length == 2) datastring = tmp1[1].split("\"#");
		      else datastring = new String[] {};
  		      String records[][] = new String[datastring.length][count];
  		      int deleteline[] = new int[datastring.length];
  		      for(int i=0;i<columnname.length;i++)
		      {
		    	  columnname[i] = namestring + "." + columnname[i];
		      }
  		      for(int i=0;i<types.length;i++)
		      {
  		    	  if(types[i].contains("char"))
  		    		  types[i] = "char";
		      }
  		      for(int i=0;i<datastring.length;i++)
  		      {
  		    	  deleteline[i] = 0;
  		    	  records[i] = datastring[i].split("\"");
  		      }
  		      if(valuestring.compareTo("") == 0) //no where clause
  		      {
  		    	  for(int i=0;i<deleteline.length;i++)
    		      {
    		    	  deleteline[i] = 1;
    		      }
  		      }
  		      else
  		      {
  		    	  valuestring = valuestring.substring(6, valuestring.length());
  		    	  deleteline = checkIf(columnname,types,records,valuestring,deleteline); //where clause check
  		      }
  		      /*
  		      for(int i=0;i<deleteline.length;i++)
  		      {
  		    	  System.out.print(deleteline[i]);
  		      }
  		      System.out.println("");
  		      */
  		      if(errorstring.compareTo("") == 0)
  		      {
	  		      String splp[] = spl[prinum].split("\"");
		    	  int priColumn[] = new int[splp.length-1];
		  		  for(int j=1; j<splp.length;j++)
		  		  {
		  			  int k;
		  			  for(k=0;k<count;k++)
		  			  {
		  				  if(splp[j].compareTo(column_name[k]) == 0)
		  				  {
		  					  priColumn[j-1] = k;
		  					  break; //exit
		  				  }
		  					
		  			  }
		    	  }			
	  		      
	  		      int notdelete = 0;
	  		      int delete = 0;
	  		      int mustdelete = 0;
	  		      ArrayList<String> tablename = new ArrayList<String>();
	  		      ArrayList<int[]> firstColumn = new ArrayList<int[]>();
	  		      ArrayList<String[][]> firstData = new ArrayList<String[][]>();
	  		      ArrayList<boolean[]> nullable = new ArrayList<boolean[]>();
	  		      String[][] priData = new String[datastring.length][priColumn.length];
	  		      
	  		      for(int i=0; i<deleteline.length;i++)
		      	  {
		      		  if(deleteline[i] == 1)
		      			  mustdelete ++;
		      	  }
	  		      
	  		      for(int i=0;i<priColumn.length;i++)
	  		      {
	  		    	  for(int j=0;j<datastring.length;j++)
	  		    	  {
	  		    		  priData[j][i] = records[j][priColumn[i]];
	  		    	  }
	  		      } 	
			      cursor = myDatabase.openCursor(null, null);
	  	      	  try
	  	      	  {
	  	      	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
	  	      		  do {
	  	      			  keyStringd = new String(foundKey.getData(),"UTF-8");
	  	      			  DataStringd = new String(foundData.getData(),"UTF-8");
	  	      		      if(DataStringd.contains("/" + namestring + "\"")) //find if the table that reference this table exists
	  	      		      {
	  	      		    	  tablename.add(keyStringd);
	  	      		    	  String ref_data[] = DataStringd.split("\"%");
	  	      		    	  String ref_sch[] = ref_data[0].split("\"#");
	  	      		    	  String ref_record[];
	  	      		    	  if(ref_data.length == 2)
	  	      		    		  ref_record = ref_data[1].split("\"#");
	  	      		    	  else
	  	      		    		  ref_record = new String[] {};
	  	      		    	  String refColumn[] = new String[priColumn.length];
	  	      		    	  String ref_records[][] = new String[ref_record.length][];
	  	      		    	  int refColumnNum[] = new int[priColumn.length];
	  	      		    	  boolean refColumnNull[] = new boolean[priColumn.length];
	  	      		    	  int j;
	  	      		    	  for(j=0; j<ref_sch.length;j++)
	  	      		    	  {
	  	      		    		  if(ref_sch[j].contains("/" + namestring + "\""))
	  	      		    			  break;
	  	      		    	  }
	  	      		    	  String tmp[] = ref_sch[j].split("\"");
	  	      		    	  for(int k=0; k<priColumn.length; k++)
	  	      		    	  {
	  	      		    		  int div = (tmp.length - 3)/2;
	  	      		    		  for (int l=div+3; l<tmp.length; l++)
	  	      		    		  {
	  	      		    			  if(tmp[l].compareTo(column_name[priColumn[k]]) == 0)
	  	      		    			  {
	  	      		    				  refColumn[k] = tmp[l-2-div];
	  	      		    				  break;
	  	      		    			  }
	  	      		    		  }
	  	      		    	  }
	  	      		    	  int cnt = 0;
	  	      		    	  for(int k=0; k<refColumn.length;k++)
	  	      		    	  {      	
	  	      		    		  cnt = 0;
		  	      		    	  for(int l=0; l<ref_sch.length;l++)
		  	      		    	  {
		  	      		    		  String tmp2[] = ref_sch[l].split("\"");
		  	      		    			  	      		    		  
		  	      		    		  if(tmp2[0].compareTo(refColumn[k]) == 0)
		  	      		    		  {
		  	      		    			  refColumnNum[k] = cnt;
		  	      		    			  if(tmp2.length == 3)
		  	      		    				  refColumnNull[k] = false;
		  	      		    			  else 
		  	      		    				  refColumnNull[k] = true;
		  	      		    			  break;
		  	      		    		  }
		  	      		    		  
		  	      		    		  if(tmp2[0].compareTo("primary key") != 0 && tmp2[0].compareTo("foreign key") != 0)
		  	      		    			  cnt++;
		  	      		    	  }
	  	      		    	  }
	  	      		    	  for(int k=0; k<ref_record.length;k++)
		      		    	  {
		      		    		  ref_records[k] = ref_record[k].split("\"");
		      		    	  }
	  	      		    	  firstColumn.add(refColumnNum); //referencing column number of the table
	  	      		    	  firstData.add(ref_records); //referencing table records
	  	      		    	  nullable.add(refColumnNull); //referencing table column nullability
	  	      		    	  
	  	      		      }
	  	      		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
	  	      		    
	  	      	  } catch(Exception e){
	  	      	    	
	  	      	  }
	  	      	  cursor.close();
	  	      	  String deleteCol = "";
	  	      	  for(int i=0; i<priData.length; i++)
	  	      	  {   
	  	      		  if(deleteline[i] == 1) //the line might be deleted
	  	      		  {
		  	      		  boolean candel = true;
		  	      		  deleteCol = deleteCol + "" + i;
		  	      		  deleteCol = deleteCol + "#";
		  	      		  for(int j=0; j<tablename.size();j++)
		  	      		  {
		  	      			  boolean canfix = true;
		  	      			  boolean isempty = true;
		  	      			  int k=0;
		  	      			  for (k=0; k<firstData.get(j).length; k++)
		  	      			  {
		  	      				  boolean test = true;
		  	      				  for(int l=0; l<firstColumn.get(j).length;l++)
		  	      				  {
		  	      					  if(firstData.get(j)[k][firstColumn.get(j)[l]].compareTo(priData[i][l]) != 0)
		  	      					  {
		  	      						  test = false; //not same data
		  	      						  break;
		  	      					  }
		  	      				  }
		  	      				  if(test)
		  	      				  {
		  	      					  isempty = false; //the table doesn't contain data that might be deleted
		  	      					  deleteCol = deleteCol + "" + k;
		  	      				      deleteCol = deleteCol + "@";
		  	      				  }
		  	      			  }
		  	      			  
		  	      			  for(int x=0; x<nullable.get(j).length;x++)
		    				  {
			      				  if(!nullable.get(j)[x])
			      				  {
			      					  canfix = false;
			      					  break;
			      				  }
		    				  }
		  	      			  
		  	      			  if(!isempty && !canfix) //referencing table contains the data & it is not nullable
		  	      				  candel = false;
		  	      			  
		  	      			  deleteCol = deleteCol + "#";
		  	      			 
		  	      		  }
		  	      		  if(!candel) deleteline[i] = 0;
		  	      		  deleteCol = deleteCol + "%";
	  	      		  }
	  	      	  }	
	  	      	  /*
	  	      	  for(int i=0;i<deleteline.length;i++)
	  		      {
	  		    	  System.out.print(deleteline[i]);
	  		      }
	  		      System.out.println("");
	  		      */
	  	      	  //18# 3@9@# 7@# # 5@# % 23# 7@11@19@# 22@37@# 19@# # %
	  	      	  //deletion of line 18 deletes line 3,9 of 1st table, line 7 of 2nd table, line 5 of 4th table, 
	  	      	  //deletion of line 23 deletes line 7,11,19 of 1st table, line 22,37 of 2nd table, line 19 of 3rd table.
	  	      	  //System.out.println(deleteCol);
	  	      	  
	  	      	  if(deleteCol.compareTo("") != 0)
	  	      	  {
		  	      	  String[] deleteColspl = deleteCol.split("%");
		  	      	  for(int i=0;i<deleteColspl.length;i++)
		  	      	  {
		  	      		  String[] deleteColspc = deleteColspl[i].split("#");
		  	      		  if(deleteline[Integer.parseInt(deleteColspc[0])] == 1)
		  	      		  {	  	      			  
		  	      			  for(int j=1;j<deleteColspc.length;j++)
		  	      			  {
		  	      				  String tmp[] = deleteColspc[j].split("@");
		  	      				  for(int k=0; k<tmp.length;k++)
		  	      				  {
		  	      					  for(int l=0; l<firstColumn.get(j-1).length;l++)
		  	      					  {
		  	      						  firstData.get(j-1)[Integer.parseInt(tmp[k])][l] = "null";	//make nullable column data to null if it contains data to be erased     						  
		  	      					  }
		  	      				  }
		  	      			  }
		  	      			  
		  	      		  }
		  	      	  }    	  
		  	      	  String tableData[] = new String[tablename.size()]; 
		  	      	  for(int curtable = 0; curtable<tablename.size(); curtable++) //modify referencing table
		  	      	  {
		  	      		  cursor = myDatabase.openCursor(null, null);
				      	  try
				      	  {
				      	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
				      		  do {
				      			  keyStringd = new String(foundKey.getData(),"UTF-8");
				      		      if(keyStringd.compareTo(tablename.get(curtable)) == 0) //find if the table exists
				      		      {
				      		    	  DataStringd = new String(foundData.getData(),"UTF-8");
				      		    	  String tmp[] = DataStringd.split("\"%");
				      		    	  tableData[curtable] = tmp[0] + "\"%" + makeData(firstData.get(curtable));
				      		    	  break;
				      		      }
				      		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
				      		    
				      	  } catch(Exception e){
				      	      	
				      	  }		      	  
				      	  try {
				      		  foundKey = new DatabaseEntry(tablename.get(curtable).getBytes("UTF-8"));
				      		  foundData = new DatabaseEntry(tableData[curtable].getBytes("UTF-8"));
				      		  cursor.delete();
				      		  cursor.put(foundKey, foundData);				      	  
						  } catch (UnsupportedEncodingException e) {
							
						  }
				      	  cursor.close();		      	  
		  	      	  }
		  	      	  cursor = myDatabase.openCursor(null, null);
		  	      	  String the_table = "";
			      	  try //modify referenced table
			      	  {
			      	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);   	
			      		  do {
			      			  keyStringd = new String(foundKey.getData(),"UTF-8");
			      		      if(keyStringd.compareTo(namestring) == 0) //find if the table exists
			      		      {
			      		    	  DataStringd = new String(foundData.getData(),"UTF-8");
			      		    	  String tmp[] = DataStringd.split("\"%");
			      		    	  the_table = tmp[0] + "\"%" + makeDataWithout(records, deleteline);
			      		    	  break;
			      		      }
			      		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
			      		    
			      	  } catch(Exception e){
			      	      	
			      	  }		      	  
			      	  try {
			      		  foundKey = new DatabaseEntry(namestring.getBytes("UTF-8"));
			      		  foundData = new DatabaseEntry(the_table.getBytes("UTF-8"));
			      		  cursor.delete();
			      		  cursor.put(foundKey, foundData);				      	  
					  } catch (UnsupportedEncodingException e) {
						
					  }
			      	  cursor.close();
	  	      	  }
		      	  for(int i=0; i<deleteline.length;i++)
		      	  {
		      		  if(deleteline[i] == 1)
		      			  delete ++;
		      	  }
		      	  notdelete = mustdelete-delete;
		      	  System.out.println(delete +" row(s) are deleted");
		      	  System.out.println(notdelete + " row(s) are not deleted due to referential integrity");
  		      }
  		      else
  		    	  System.out.println(errorstring);
    	  }
    	  else
    	  {
    		  System.out.println("No such table");
    	  }
    	  
    	  //System.out.println(namestring);
    	  //System.out.println(valuestring);
    	  break;
      case PRINT_SELECT:
    	  String[] selectcol = namestring.split(",\"");
    	  String[] fromwhere = valuestring.split("\"#");	  
    	  String where = null;	  
    	  foundKey = new DatabaseEntry();
    	  foundData = new DatabaseEntry();
    	  if(fromwhere.length == 2)
    		  where = fromwhere[1];
    	  
    	  //System.out.println(namestring);
    	  //System.out.println(fromwhere[0]);   	  
    	  
    	  String tables[] = fromwhere[0].substring(5, fromwhere[0].length()).split(",\"");
    	  String records[][] = {};
    	  String tmpKey = null;
    	  String tmpData = null;
    	  String columns[] = {};
    	  String types[] = {};
    	  for(int i=0; i <tables.length; i++)
    	  {
    		  String tmpTable[] = tables[i].split("\"");
    		  String tablename;
    		  exist = false;
    		  if(tmpTable.length == 3) tablename = tmpTable[2];
    		  else tablename = tmpTable[0];
    		  cursor = myDatabase.openCursor(null, null);
        	  try
        	  {
        	      cursor.getFirst(foundKey,foundData,LockMode.DEFAULT);  	
        		  do {
        			  tmpKey = new String(foundKey.getData(),"UTF-8");
        		      if(tmpKey.compareTo(tmpTable[0]) == 0) //find if the table exists
        		      {
        		    	  tmpData = new String(foundData.getData(),"UTF-8");
        		    	  exist = true;
        		    	  break;
        		      }
        		  } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
        		    
        	  } catch(Exception e){
        	    	
        	  }
        	  cursor.close();
        	  if(exist) //if table exists
        	  {
	        	  String[] tmp1 = tmpData.split("\"%");
	    		  String[] spl = tmp1[0].split("\"#");
	    		  String column_name[] = new String[spl.length];
	  		      String type[] = new String[spl.length];
	  		      int count = 0;
	  		      
	  		      for(int j=0;j<spl.length;j++)
	  		      {
	  		    	  String spl2[] = spl[j].split("\"");
	  		    	  switch(spl2[0])
	  		    	  {
	  		    	  case "primary key":
	  		    		  break;
	  		    	  case "foreign key":
	  		    		  break;
	  		    	  default:
	  		    		  column_name[count] = spl2[0];
	  		    		  type[count] = spl2[1];
	  		    		  count ++;
	  		    		  break;
	  		    	  }
	  		      }	

	  		      String columnname[] = Arrays.copyOfRange(column_name, 0, count);
			      String table_types[] = Arrays.copyOfRange(type, 0, count);
			      String datastring[];
			      if(tmp1.length == 2) datastring = tmp1[1].split("\"#");
			      else datastring = new String[] {};
			      String table_records[][] = new String[datastring.length][count];
			      for(int j=0;j<columnname.length;j++)
			      {
			    	  columnname[j] = tablename + "." + columnname[j];
			      }
			      for(int j=0;j<table_types.length;j++)
			      {		    	  
			    	  if(table_types[j].contains("char"))
			    		  table_types[j] = "char";
			      }
			      for(int j=0;j<datastring.length;j++)
			      {
			    	  table_records[j] = datastring[j].split("\"");
			      }
			      
			      types = concat(types,table_types); //concat column types
			      //System.out.println("hello");
			      if(records.length == 0)
			    	  records = table_records;
			      else records = concatRec(records,table_records); //join records
	  		      columns = concat(columns,columnname);	//concat column name
        	  }
        	  else
        	  {
        		  errorstring = "Selection has failed: '" +tmpTable[0]+ "' does not exist";
        		  break;
        	  }
    	  }  
    	  
    	  /*
    	  System.out.println("records");
    	  
    	  for(int i=0;i<records.length;i++)
    	  {
    		  for(int j=0;j<records[i].length;j++)
    		  {
    			  System.out.print(records[i][j] + " ");
    		  }
    		  System.out.println(" ");
    	  }
    	  
    	  
    	  System.out.println("types");
    	  
    	  for(int i=0;i<types.length;i++)
    	  {
    		  System.out.print(types[i] + " ");
    	  }
    	  System.out.println(" ");
    	  
    	  System.out.println("columns");
    	  
    	  for(int i=0;i<columns.length;i++)
    	  {
    		  System.out.print(columns[i] + " ");
    	  }
    	  System.out.println(" ");
    	  */
    	  
    	  int deleteline[] = falsearr(records.length);
    	  
    	  if(errorstring.compareTo("") == 0)
    	  {
	    	  if(fromwhere.length == 2) 	  
	    		  deleteline = checkIf(columns,types,records,where.substring(6, where.length()),deleteline); //where clause
	    	  else
	    	  {
	    		  for(int i=0;i<deleteline.length;i++)
			      {
			    	  deleteline[i] = 1;
			      }
	    	  }
    	  }
    	  
    	  /*
    	  for(int i=0;i<deleteline.length;i++)
	      {
	    	 System.out.print(deleteline[i]);
	      }
    	  
    	  System.out.println(" ");
    	  */
    	  if(errorstring.compareTo("") == 0) 
    	  {
    		  //print data which are selected
	    	  if(selectcol[0].compareTo("*\"") == 0) //print all columns
	    	  {
	    		  String[] printName = new String[columns.length];
	    		  printName = reduce(columns);
	    		  System.out.println("----------------------------------");
	    		  for(int i=0;i<printName.length;i++)
	    		  {
	    			  System.out.print(printName[i]);
	    			  System.out.print(" ");
	    		  }
	    		  System.out.println("");
	    		  System.out.println("----------------------------------");
	    		  for(int i=0;i<records.length;i++)
	    		  {
	    			  if(deleteline[i] == 1)
	    			  {
		    			  for(int j=0;j<columns.length;j++)
			    		  {	
		    				  if(records[i][j].contains("'"))
		    					  System.out.print(records[i][j].substring(1, records[i][j].length()-1));
		    				  else
		    					  System.out.print(records[i][j]);
			    			  System.out.print(" ");
			    		  }
		    			  System.out.println("");
	    			  }
	    		  }
	    		  System.out.println("----------------------------------");
	    	  }
	    	  else //print selected columns
	    	  {
	    		  int[] printCol = new int[selectcol.length];
	    		  String[] printName = new String[selectcol.length];
	    		  String[] reduceCol = reduce(columns);
	    		  for(int i=0;i<selectcol.length;i++)
	    		  {
	    			  String tmp[] = selectcol[i].split("\"");
	    			  
	    			  int tmpk = 0;
					  int cnt = 0;
					  for(int k=0;k<columns.length;k++)
					  {
						  if(columnSearch(columns[k], tmp[0]))
						  {
							  cnt++;
							  tmpk = k;
						  }
					  }
					  if((cnt == 0) || (cnt >= 2))
					  {
						  errorstring = "Selection has failed: fail to resolve '" + tmp[0] + "'";
						  break;
					  }
					  else
					  {
						  if(tmp.length == 3)
		    				  printName[i] = tmp[2];
						  else
							  printName[i] = reduceCol[tmpk];
						  
						  printCol[i] = tmpk;
					  }
	    		  }
	    		  if(errorstring.compareTo("") == 0)
	    		  {
	    			  System.out.println("----------------------------------");
		    		  for(int i=0;i<printName.length;i++)
		    		  {
		    			  System.out.print(printName[i]);
		    			  System.out.print(" ");
		    		  }
		    		  System.out.println("");
		    		  System.out.println("----------------------------------");
		    		  for(int i=0;i<records.length;i++)
		    		  {
		    			  if(deleteline[i] == 1)
		    			  {
			    			  for(int j=0;j<printCol.length;j++)
				    		  {			    				  
			    				  if(records[i][printCol[j]].contains("'"))
			    					  System.out.print(records[i][printCol[j]].substring(1, records[i][printCol[j]].length()-1));
			    				  else
			    					  System.out.print(records[i][printCol[j]]);
			    				  System.out.print(" ");
				    		  }
			    			  System.out.println("");
		    			  }
		    		  }
		    		  System.out.println("----------------------------------");
	    		  }
	    		  else
	    			  System.out.println(errorstring);
	    	  }
    	  }
    	  else
    		  System.out.println(errorstring);   	  		  
    	  break;
    	  
      }
  }
  
  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE: 	  
        //System.out.println("\u005c'CREATE TABLE\u005c' requested");
        break;
      case PRINT_DROP_TABLE:
        //System.out.println("\u005c'DROP TABLE\u005c' requested");
        break;
      case PRINT_DESC:
        //System.out.println("\u005c'DESC\u005c' requested");
        break;
      case PRINT_INSERT:
        //System.out.println("\u005c'INSERT\u005c' requested");
        break;
      case PRINT_DELETE:
        //System.out.println("\u005c'DELETE\u005c' requested");
        break;
      case PRINT_SELECT:
        //System.out.println("\u005c'SELECT\u005c' requested");
        break;
      case PRINT_SHOW_TABLES:
        //System.out.println("\u005c'SHOW TABLES\u005c' requested");
        break;
    }
    System.out.print("DB_2016-11464> ");
  }

//1.QUERY
//total command
  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
    case DROP_TABLE:
    case DESC:
    case SHOW_TABLES:
    case SELECT:
    case INSERT_INTO:
    case DELETE_FROM:
      queryList();
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
      /* CLOSING DB */
      if (myDatabase != null) myDatabase.close();
      if (myDbEnvironment != null) myDbEnvironment.close();
      System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//list of queries
  static final public void queryList() throws ParseException {
  int q;
    label_1:
    while (true) {
      q = query();
      jj_consume_token(SEMICOLON);  
      operateDataBase(q);
      printMessage(q);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_TABLE:
      case DROP_TABLE:
      case DESC:
      case SHOW_TABLES:	  
      case SELECT:
      case INSERT_INTO:
      case DELETE_FROM:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

//one query
  static final public int query() throws ParseException {
  int q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
      createTableQuery();
      q = PRINT_CREATE_TABLE;
      break;
    case DROP_TABLE:
      dropTableQuery();
      q = PRINT_DROP_TABLE;
      break;
    case DESC:
      descQuery();
      q = PRINT_DESC;
      break;
    case SELECT:
      selectQuery();
      q = PRINT_SELECT;
      break;
    case INSERT_INTO:
      insertQuery();
      q = PRINT_INSERT;
      break;
    case DELETE_FROM:
      deleteQuery();
      q = PRINT_DELETE;
      break;
    case SHOW_TABLES:
      showTablesQuery();
      q = PRINT_SHOW_TABLES;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

//2.CREATE_TABLE
  static final public void createTableQuery() throws ParseException {
    jj_consume_token(CREATE_TABLE);
    //initialize strings
    namestring = ""; //will contain information of table name
    valuestring = ""; //will contain information of columns
    errorstring = ""; //will contain information of errors
    tableName();
    namestring = new String(valuestring);
    valuestring = "";
    tableElementList();
    //System.out.println("tablename : "+namestring);
    //System.out.println("values : "+valuestring);
    
    
  }

  static final public void tableElementList() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    tableElement();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      tableElement();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void tableElement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      columnDefinition();
      break;
    case PRIMARY_KEY:
    case FOREIGN_KEY:
      tableConstraintDefinition();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    valuestring = valuestring+"#"; //add column delimiter
  }

  static final public void columnDefinition() throws ParseException {
    columnName();
    String tmp[] = valuestring.split("\"#");
    for(int i=0;i<tmp.length-1;i++)
    {
    	String tmp2[] = tmp[i].split("\"");
    	if(tmp2[0].compareTo(tmp[tmp.length-1].substring(0, tmp[tmp.length-1].length()-1)) == 0) //check every column when adding if it is duplicated
    	{
    		errorstring = "Create table has failed: column definition is duplicated";
    		break;
    	}
    }
    dataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_NULL:
    	valuestring = valuestring + jj_consume_token(NOT_NULL);
    	valuestring = valuestring + "\"";
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void tableConstraintDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY_KEY:
      primaryKeyConstraint();
      break;
    case FOREIGN_KEY:
      referentialConstraint();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primaryKeyConstraint() throws ParseException {
	valuestring = valuestring + jj_consume_token(PRIMARY_KEY);
	valuestring = valuestring + "\""; //delimiter between every word
    columnNameList();
  }

  static final public void referentialConstraint() throws ParseException {
	valuestring = valuestring + jj_consume_token(FOREIGN_KEY);
	valuestring = valuestring + "\"";
    columnNameList();
    valuestring = valuestring + jj_consume_token(REFERENCES);
    valuestring = valuestring + "\"/"; //table name identifier '/'
    tableName();
    valuestring = valuestring + "\"";
    columnNameList();  
  }

  static final public void columnNameList() throws ParseException {
	jj_consume_token(LEFT_PAREN);
    columnName();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void dataType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      valuestring = valuestring + jj_consume_token(INT);
      break;
    case CHAR:
      valuestring = valuestring + jj_consume_token(CHAR);
      valuestring = valuestring + jj_consume_token(LEFT_PAREN);
      String int_val = "" + jj_consume_token(INT_VALUE);
      if(int_val.compareTo("0") == 0) errorstring = "Char length should be over 0"; //if char(0) then error
      valuestring = valuestring + int_val;
      valuestring = valuestring + jj_consume_token(RIGHT_PAREN);
      break;
    case DATE:
      valuestring = valuestring + jj_consume_token(DATE);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    valuestring = valuestring + "\"";
  }

  static final public void tableName() throws ParseException {
	 String tmp = "" + jj_consume_token(LEGAL_IDENTIFIER);
	 valuestring = valuestring + tmp.toLowerCase();
  }

  static final public void columnName() throws ParseException {
	 String tmp = "" + jj_consume_token(LEGAL_IDENTIFIER);
     valuestring = valuestring + tmp.toLowerCase();
     valuestring = valuestring + "\"";
  }

//3.DROP TABLE, DESC, SHOW TABLES
  static final public void dropTableQuery() throws ParseException {
    jj_consume_token(DROP_TABLE);
    valuestring = "";
    errorstring = "";
    tableName();
  }

  static final public void descQuery() throws ParseException {
    jj_consume_token(DESC);
    valuestring = "";
    tableName();
  }

  static final public void showTablesQuery() throws ParseException{
    jj_consume_token(SHOW_TABLES);
  }

//4.SELECT
  static final public void selectQuery() throws ParseException {
    jj_consume_token(SELECT);
    namestring = "";
    valuestring = "";
    errorstring = "";
    selectList();
    namestring = new String(valuestring);
    valuestring = "";
    tableExpression();
  }

  static final public void selectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      valuestring = valuestring + jj_consume_token(ALL);
      valuestring = valuestring + "\"";
      break;
    case LEGAL_IDENTIFIER:
      selectedColumn();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        valuestring = valuestring + jj_consume_token(COMMA);
        valuestring = valuestring + "\"";
        selectedColumn();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selectedColumn() throws ParseException {
    if (jj_2_1(2)) {
      tableName();
      valuestring = valuestring + jj_consume_token(PERIOD);
      columnName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        columnName();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      valuestring = valuestring + jj_consume_token(AS);
      valuestring = valuestring + "\"";
      columnName();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void tableExpression() throws ParseException {
    fromClause();
    valuestring = valuestring + "\"#";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void fromClause() throws ParseException {
	valuestring = valuestring + jj_consume_token(FROM);
	valuestring = valuestring + "\"";
    tableReferenceList();
  }

  static final public void tableReferenceList() throws ParseException {
    referedTable();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      valuestring = valuestring + jj_consume_token(COMMA);
      valuestring = valuestring + "\"";
      referedTable();
    }
  }

  static final public void referedTable() throws ParseException {
    tableName();
    valuestring = valuestring + "\"";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      valuestring = valuestring + jj_consume_token(AS);
      valuestring = valuestring + "\"";
      tableName();
      valuestring = valuestring + "\"";
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void whereClause() throws ParseException {
	 valuestring = valuestring + jj_consume_token(WHERE);
	valuestring = valuestring + "\"";
    booleanValueExpression();
  }

  static final public void booleanValueExpression() throws ParseException {
    booleanTerm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      valuestring = valuestring + jj_consume_token(OR);
      valuestring = valuestring + "\"";
      booleanTerm();
    }
  }

  static final public void booleanTerm() throws ParseException {
    booleanFactor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      valuestring = valuestring + jj_consume_token(AND);
      valuestring = valuestring + "\"";
      booleanFactor();
    }
  }

  static final public void booleanFactor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      valuestring = valuestring + jj_consume_token(NOT);
      valuestring = valuestring + "\"";
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    booleanTest();
  }

  static final public void booleanTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case CHAR_STRING:
    case DATE_VALUE:
    case LEGAL_IDENTIFIER:
      predicate();
      break;
    case LEFT_PAREN:
      parenthesizedBooleanExpression();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parenthesizedBooleanExpression() throws ParseException {
	valuestring = valuestring + jj_consume_token(LEFT_PAREN);
    booleanValueExpression();
    valuestring = valuestring + jj_consume_token(RIGHT_PAREN);
  }

  static final public void predicate() throws ParseException {
    if (jj_2_2(4)) {
      comparisonPredicate();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        nullPredicate();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void comparisonPredicate() throws ParseException {
    compOperand();
    valuestring = valuestring + jj_consume_token(COMP_OP);
    valuestring = valuestring + "\""; 
    compOperand();
  }

  static final public void compOperand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case CHAR_STRING:
    case DATE_VALUE:
      comparableValue();
      break;
    case LEGAL_IDENTIFIER:
      if (jj_2_3(2)) {
        tableName();
        valuestring = valuestring + jj_consume_token(PERIOD);
        columnName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEGAL_IDENTIFIER:
          columnName();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparableValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
      valuestring = valuestring + jj_consume_token(INT_VALUE);
      break;
    case CHAR_STRING:
      valuestring = valuestring + jj_consume_token(CHAR_STRING);
      break;
    case DATE_VALUE:
      valuestring = valuestring + jj_consume_token(DATE_VALUE);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    valuestring = valuestring + "\"";
  }

  static final public void nullPredicate() throws ParseException {
    if (jj_2_4(2)) {
      tableName();
      valuestring = valuestring + jj_consume_token(PERIOD);
      columnName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        columnName();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    nullOperation();
  }

  static final public void nullOperation() throws ParseException {
	valuestring = valuestring + jj_consume_token(IS);
	valuestring = valuestring + "\"";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      valuestring = valuestring + jj_consume_token(NOT);
      valuestring = valuestring + "\"";
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    valuestring = valuestring + jj_consume_token(NULL2);
    valuestring = valuestring + "\"";
  }

//5.INSERT, DELETE
  static final public void insertQuery() throws ParseException {
    jj_consume_token(INSERT_INTO);
    namestring = ""; //will contain information of table name
    valuestring = ""; //will contain information of columns
    errorstring = ""; //will contain information of errors
    tableName();
    namestring = new String(valuestring);
    valuestring = "";
    insertColumnsAndSource();
  }

  static final public void insertColumnsAndSource() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      columnNameList();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    valueList();
  }

  static final public void valueList() throws ParseException {
	valuestring = valuestring + jj_consume_token(VALUES);
	valuestring = valuestring + "\"";
    jj_consume_token(LEFT_PAREN);
    value();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      value();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      valuestring = valuestring + jj_consume_token(NULL);
      valuestring = valuestring + "\"";
      break;
    case INT_VALUE:
    case CHAR_STRING:
    case DATE_VALUE:
      comparableValue();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void deleteQuery() throws ParseException {
    jj_consume_token(DELETE_FROM);
    namestring = ""; //will contain information of table name
    valuestring = ""; //will contain information of columns
    errorstring = ""; //will contain information of errors
    tableName();
    namestring = new String(valuestring);
    valuestring = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x501e220,0x501e200,0x501e200,0x0,0xc00,0x40000000,0xc00,0x0,0x1c0,0x0,0x20000,0x0,0x40000,0x100000,0x0,0x40000,0x200000,0x400000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x80000000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x8,0x1000,0x0,0x0,0x8,0x0,0x8,0x1000,0x1000,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x1c22,0x1000,0x1000,0x1c20,0xc20,0x1000,0x0,0x2,0x8,0xc20,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
